{"expireTime":9007200911358258000,"key":"transformer-remark-markdown-html-ast-59a8cbf619b4705e67cf9e68135a0fcd-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I still remember those days when Mobile Devs used to argue with the Backend teams regarding the unnecessary data coming in the APIs, and the reason is we used to create the General-Purpose API Backend which could be consumed by any of the clients(Web/Mobile) untill ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":267,"offset":267}}},{"type":"element","tagName":"a","properties":{"href":"https://samnewman.io/patterns/architectural/bff/","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"BFF (Backend for Frontend)","position":{"start":{"line":2,"column":268,"offset":268},"end":{"line":2,"column":294,"offset":294}}}],"position":{"start":{"line":2,"column":267,"offset":267},"end":{"line":2,"column":345,"offset":345}}},{"type":"text","value":" pattern was introduced by SoundCloud in 2015. But having BFF has its own caveats like, there is a high probability that each BFF may implement similar capabilities with different teams, easily doubling (or more) the cost of development and as we segment backends for each constituent frontend, the number of deployable units increases.","position":{"start":{"line":2,"column":345,"offset":345},"end":{"line":2,"column":681,"offset":681}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":681,"offset":681}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Does that mean GraphQL is going to replace BFF ?","position":{"start":{"line":4,"column":3,"offset":685},"end":{"line":4,"column":51,"offset":733}}}],"position":{"start":{"line":4,"column":1,"offset":683},"end":{"line":4,"column":53,"offset":735}}},{"type":"text","value":". Well, some GraphQL literature insists that this new technology gives so much freedom to the client by allowing them to perform ad-hoc queries that you can safely have a single Backend without the drawbacks from REST-based approaches. You can take a look at this amazing ","position":{"start":{"line":4,"column":53,"offset":735},"end":{"line":4,"column":325,"offset":1007}}},{"type":"element","tagName":"a","properties":{"href":"https://philcalcado.com/2019/07/12/some_thoughts_graphql_bff.html","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"article","position":{"start":{"line":4,"column":326,"offset":1008},"end":{"line":4,"column":333,"offset":1015}}}],"position":{"start":{"line":4,"column":325,"offset":1007},"end":{"line":4,"column":401,"offset":1083}}},{"type":"text","value":" to get more insights of it.","position":{"start":{"line":4,"column":401,"offset":1083},"end":{"line":4,"column":429,"offset":1111}}}],"position":{"start":{"line":4,"column":1,"offset":683},"end":{"line":4,"column":429,"offset":1111}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Well, there are tons of articles which explain what GraphQL is and what are its advantages over REST ? but I would like to talk about the ones which I found really useful.","position":{"start":{"line":6,"column":1,"offset":1113},"end":{"line":6,"column":172,"offset":1284}}}],"position":{"start":{"line":6,"column":1,"offset":1113},"end":{"line":6,"column":172,"offset":1284}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"avoid-under-and-over-fetching","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#avoid-under-and-over-fetching","aria-label":"avoid under and over fetching permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Avoid under and over fetching","position":{"start":{"line":8,"column":3,"offset":1288},"end":{"line":8,"column":32,"offset":1317}}}],"position":{"start":{"line":8,"column":1,"offset":1286},"end":{"line":8,"column":32,"offset":1317}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The most powerful feature of graphql is to avoid the problem of under and over-fetching. Basically using GraphQL, we are shifiting the autonomy to the client to request the data as much as it requires ","position":{"start":{"line":10,"column":1,"offset":1319},"end":{"line":10,"column":202,"offset":1520}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"no more, no less","position":{"start":{"line":10,"column":205,"offset":1523},"end":{"line":10,"column":221,"offset":1539}}}],"position":{"start":{"line":10,"column":204,"offset":1522},"end":{"line":10,"column":222,"offset":1540}}}],"position":{"start":{"line":10,"column":202,"offset":1520},"end":{"line":10,"column":224,"offset":1542}}},{"type":"text","value":".","position":{"start":{"line":10,"column":224,"offset":1542},"end":{"line":10,"column":225,"offset":1543}}}],"position":{"start":{"line":10,"column":1,"offset":1319},"end":{"line":10,"column":225,"offset":1543}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, in our case we were working on kind of social media application where we need to show the profile of other users including their images, and basic informations like (images, age, city etc). and we wanted it to be really blazing fast and with the traditional REST intuitive pattern, this would have required us at least two requests to two endpoints","position":{"start":{"line":12,"column":1,"offset":1545},"end":{"line":12,"column":353,"offset":1897}}}],"position":{"start":{"line":12,"column":1,"offset":1545},"end":{"line":12,"column":353,"offset":1897}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>users\n\n<span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>users<span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>profile</code></pre></div>","position":{"start":{"line":14,"column":1,"offset":1899},"end":{"line":18,"column":4,"offset":1957}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"But, with GraphQL we can call this single API and prefetch all the data required.","position":{"start":{"line":19,"column":1,"offset":1958},"end":{"line":19,"column":82,"offset":2039}}}],"position":{"start":{"line":19,"column":1,"offset":1958},"end":{"line":19,"column":82,"offset":2039}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">query users <span class=\"token punctuation\">{</span>\n id\n name\n city\n age\n avatars <span class=\"token punctuation\">{</span>\n\tisProfile<span class=\"token punctuation\">,</span>\n\turl\n <span class=\"token punctuation\">}</span>\n addresses <span class=\"token punctuation\">{</span>\n\ttype<span class=\"token punctuation\">,</span>\n\taddress\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":20,"column":1,"offset":2040},"end":{"line":35,"column":4,"offset":2157}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So instead of multiple endpoints that return fixed data structures, a GraphQL server only exposes a single endpoint and responds with precisely the data a client requested.","position":{"start":{"line":36,"column":1,"offset":2158},"end":{"line":36,"column":173,"offset":2330}}}],"position":{"start":{"line":36,"column":1,"offset":2158},"end":{"line":36,"column":173,"offset":2330}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"no-api-versioning","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#no-api-versioning","aria-label":"no api versioning permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"No API Versioning","position":{"start":{"line":38,"column":3,"offset":2334},"end":{"line":38,"column":20,"offset":2351}}}],"position":{"start":{"line":38,"column":1,"offset":2332},"end":{"line":38,"column":20,"offset":2351}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"While using REST, we version API’s when we make changes to the resources or to the structure of the resources we currently have and calling the different versions of an API often times results in weird responses. for example","position":{"start":{"line":40,"column":1,"offset":2353},"end":{"line":40,"column":225,"offset":2577}}}],"position":{"start":{"line":40,"column":1,"offset":2353},"end":{"line":40,"column":225,"offset":2577}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">api.domain.com/v1/users\napi.domain.com/v2/users</code>","position":{"start":{"line":42,"column":1,"offset":2579},"end":{"line":45,"column":2,"offset":2630}}}],"position":{"start":{"line":42,"column":1,"offset":2579},"end":{"line":45,"column":2,"offset":2630}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"But, in GraphQL, it is possible to deprecate API’s on a field level. When a particular field is to be deprecated, a client receives a deprecation warning when querying the field. After a while, the deprecated field may be removed from the schema when not many clients are using it anymore. Its too easy to deprecate a field if you are using ","position":{"start":{"line":47,"column":1,"offset":2632},"end":{"line":47,"column":342,"offset":2973}}},{"type":"element","tagName":"a","properties":{"href":"https://www.apollographql.com","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"apollo-server","position":{"start":{"line":47,"column":343,"offset":2974},"end":{"line":47,"column":356,"offset":2987}}}],"position":{"start":{"line":47,"column":342,"offset":2973},"end":{"line":47,"column":388,"offset":3019}}},{"type":"text","value":".","position":{"start":{"line":47,"column":388,"offset":3019},"end":{"line":47,"column":389,"offset":3020}}}],"position":{"start":{"line":47,"column":1,"offset":2632},"end":{"line":47,"column":389,"offset":3020}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type userGender <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> Int<span class=\"token operator\">!</span>\n    name<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span> @<span class=\"token function\">deprecated</span><span class=\"token punctuation\">(</span>reason<span class=\"token operator\">:</span> <span class=\"token string\">\"Not Required.\"</span><span class=\"token punctuation\">)</span>\n    createdAt<span class=\"token operator\">:</span> Date<span class=\"token operator\">!</span>\n    updatedAt<span class=\"token operator\">:</span> Date<span class=\"token operator\">!</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":49,"column":1,"offset":3022},"end":{"line":56,"column":4,"offset":3171}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And in GraphQL Playground, it will show the warning","position":{"start":{"line":57,"column":1,"offset":3172},"end":{"line":57,"column":52,"offset":3223}}}],"position":{"start":{"line":57,"column":1,"offset":3172},"end":{"line":57,"column":52,"offset":3223}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/field-deprecation.png","alt":"alt"},"children":[],"position":{"start":{"line":59,"column":1,"offset":3225},"end":{"line":59,"column":31,"offset":3255}}},{"type":"text","value":"\nAs a result, instead of completely versioning the API, it is possible to gradually evolve the API over time without having to restructure the entire API schema.","position":{"start":{"line":59,"column":31,"offset":3255},"end":{"line":60,"column":161,"offset":3417}}}],"position":{"start":{"line":59,"column":1,"offset":3225},"end":{"line":60,"column":161,"offset":3417}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Also, adding new fields has no effect on any current clients because you only get the fields you request.","position":{"start":{"line":62,"column":1,"offset":3419},"end":{"line":62,"column":106,"offset":3524}}}],"position":{"start":{"line":62,"column":1,"offset":3419},"end":{"line":62,"column":106,"offset":3524}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"introspectable","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#introspectable","aria-label":"introspectable permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Introspectable","position":{"start":{"line":63,"column":3,"offset":3527},"end":{"line":63,"column":17,"offset":3541}}}],"position":{"start":{"line":63,"column":1,"offset":3525},"end":{"line":63,"column":17,"offset":3541}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For REST APIs, we need to use tools like Swagger to document the APIs but, GraphQL comes with its own inbuilt Playground, using which you can see your defined schema, It’s possible to query any GraphQL API to ask it about itself. Every compliant server has a ","position":{"start":{"line":65,"column":1,"offset":3543},"end":{"line":65,"column":260,"offset":3802}}},{"type":"raw","value":"<code class=\"language-text\">__schema</code>","position":{"start":{"line":65,"column":260,"offset":3802},"end":{"line":65,"column":270,"offset":3812}}},{"type":"text","value":" field which will allow you to retrieve information about the available fields and types. You can create your query, mutation, subscription etc all out there and see the results.","position":{"start":{"line":65,"column":270,"offset":3812},"end":{"line":65,"column":448,"offset":3990}}}],"position":{"start":{"line":65,"column":1,"offset":3543},"end":{"line":65,"column":448,"offset":3990}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"schema-stiching","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#schema-stiching","aria-label":"schema stiching permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Schema Stiching","position":{"start":{"line":67,"column":3,"offset":3994},"end":{"line":67,"column":18,"offset":4009}}}],"position":{"start":{"line":67,"column":1,"offset":3992},"end":{"line":67,"column":18,"offset":4009}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, this particular feature, I haven’t got a chance to use it but this feature really embraces the Microservices Archietecture. Here, the backend would be broken down into multiple microservices with distinct functionalities. As a result, each microservice can define its own GraphQL schema.","position":{"start":{"line":69,"column":1,"offset":4011},"end":{"line":69,"column":292,"offset":4302}}}],"position":{"start":{"line":69,"column":1,"offset":4011},"end":{"line":69,"column":292,"offset":4302}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Afterward, you could use schema stitching to weave all individual schemas into one general schema which can then be accessed by each of the client applications. In the end, each microservice can have its own GraphQL endpoint whereas one GraphQL API gateway consolidates all schemas into one global schema to make it available to the client applications.","position":{"start":{"line":71,"column":1,"offset":4304},"end":{"line":71,"column":354,"offset":4657}}}],"position":{"start":{"line":71,"column":1,"offset":4304},"end":{"line":71,"column":354,"offset":4657}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/schema-stich.jpg","alt":"alt"},"children":[],"position":{"start":{"line":73,"column":1,"offset":4659},"end":{"line":73,"column":26,"offset":4684}}}],"position":{"start":{"line":73,"column":1,"offset":4659},"end":{"line":73,"column":26,"offset":4684}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can take an in-depth look at GraphQL ","position":{"start":{"line":75,"column":1,"offset":4686},"end":{"line":75,"column":42,"offset":4727}}},{"type":"element","tagName":"a","properties":{"href":"https://www.apollographql.com/blog/graphql-schema-stitching-8af23354ac37/","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"Schema Stitching by Sashko Stubailo","position":{"start":{"line":75,"column":43,"offset":4728},"end":{"line":75,"column":78,"offset":4763}}}],"position":{"start":{"line":75,"column":42,"offset":4727},"end":{"line":75,"column":154,"offset":4839}}},{"type":"text","value":" to get a deeper understanding of the concepts involved.","position":{"start":{"line":75,"column":154,"offset":4839},"end":{"line":75,"column":210,"offset":4895}}}],"position":{"start":{"line":75,"column":1,"offset":4686},"end":{"line":75,"column":210,"offset":4895}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, I have only mentioned the features which I have used and explored but there are lot more remaining and I would love to pen them down here as I use them.","position":{"start":{"line":77,"column":1,"offset":4897},"end":{"line":77,"column":157,"offset":5053}}}],"position":{"start":{"line":77,"column":1,"offset":4897},"end":{"line":77,"column":157,"offset":5053}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"a-big-but","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#a-big-but","aria-label":"a big but permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"A Big “But”","position":{"start":{"line":79,"column":3,"offset":5057},"end":{"line":79,"column":14,"offset":5068}}}],"position":{"start":{"line":79,"column":1,"offset":5055},"end":{"line":79,"column":14,"offset":5068}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, the above features which I have mentioned don’t come for free. Remember? what Uncle Ben said to Peter Parker ","position":{"start":{"line":81,"column":1,"offset":5070},"end":{"line":81,"column":114,"offset":5183}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"With great power comes great responsibility","position":{"start":{"line":81,"column":117,"offset":5186},"end":{"line":81,"column":160,"offset":5229}}}],"position":{"start":{"line":81,"column":116,"offset":5185},"end":{"line":81,"column":161,"offset":5230}}}],"position":{"start":{"line":81,"column":114,"offset":5183},"end":{"line":81,"column":163,"offset":5232}}},{"type":"text","value":". And here the onus is on the developers, to keep a keen eye on the problems mentioned below.","position":{"start":{"line":81,"column":163,"offset":5232},"end":{"line":81,"column":256,"offset":5325}}}],"position":{"start":{"line":81,"column":1,"offset":5070},"end":{"line":81,"column":256,"offset":5325}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"n1-problem","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#n1-problem","aria-label":"n1 problem permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"(N+1) Problem","position":{"start":{"line":83,"column":3,"offset":5329},"end":{"line":83,"column":16,"offset":5342}}}],"position":{"start":{"line":83,"column":1,"offset":5327},"end":{"line":83,"column":16,"offset":5342}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The one big gotcha with the GraphQL is (N+1) DB hits, So lets say we have schema like this","position":{"start":{"line":85,"column":1,"offset":5344},"end":{"line":85,"column":91,"offset":5434}}}],"position":{"start":{"line":85,"column":1,"offset":5344},"end":{"line":85,"column":91,"offset":5434}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">schema <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{\n  type Query {\n    users: [User]\n  } \n  \n  type User {\n    id: Int\n    avatars: [Image] \n  } \n\n  type Image {\n    id: Int \n    isProfile: String\n\turl: String\n  }\n}</span><span class=\"token template-punctuation string\">`</span></span>\n\nresolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">users</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token constant\">ORM</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAllUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  User<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">avatars</span><span class=\"token operator\">:</span>  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">userObj<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token constant\">ORM</span><span class=\"token punctuation\">.</span><span class=\"token function\">getImagesFor</span><span class=\"token punctuation\">(</span>userObj<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":86,"column":1,"offset":5435},"end":{"line":116,"column":4,"offset":5840}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And the number of SQL queries would look like","position":{"start":{"line":117,"column":1,"offset":5841},"end":{"line":117,"column":46,"offset":5886}}}],"position":{"start":{"line":117,"column":1,"offset":5841},"end":{"line":117,"column":46,"offset":5886}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT *\nFROM users; \n\nSELECT *\nFROM images \nWHERE user_id in (1); \n\nSELECT * \nFROM images \nWHERE user_id in (2); \n\nSELECT *\nFROM images \nWHERE user_id in (3); </code></pre></div>","position":{"start":{"line":119,"column":1,"offset":5888},"end":{"line":134,"column":4,"offset":6056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is where the name comes from, by the way. We will always make 1 initial query to the DB and return N results, which means we will have to make N additional DB queries. Now this is an intrinsic problem with the GraphQL and to solve this there’s a really handy tool that came out right alongside GraphQL called ","position":{"start":{"line":136,"column":1,"offset":6058},"end":{"line":136,"column":315,"offset":6372}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/graphql/dataloader","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"DataLoader","position":{"start":{"line":136,"column":316,"offset":6373},"end":{"line":136,"column":326,"offset":6383}}}],"position":{"start":{"line":136,"column":315,"offset":6372},"end":{"line":136,"column":366,"offset":6423}}},{"type":"text","value":".","position":{"start":{"line":136,"column":366,"offset":6423},"end":{"line":136,"column":367,"offset":6424}}}],"position":{"start":{"line":136,"column":1,"offset":6058},"end":{"line":136,"column":367,"offset":6424}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Dataloader","position":{"start":{"line":138,"column":3,"offset":6428},"end":{"line":138,"column":13,"offset":6438}}}],"position":{"start":{"line":138,"column":1,"offset":6426},"end":{"line":138,"column":15,"offset":6440}}},{"type":"text","value":" essentially wait for all your resolvers to load in their individual keys. Once it has them, it hits the DB once with the keys, and returns a promise that resolves an array of the values. It batches our queries instead of making one at a time. So, in above case it would just call the single IN query will all the userIds defined in it to fetch the images for them.","position":{"start":{"line":138,"column":15,"offset":6440},"end":{"line":138,"column":380,"offset":6805}}}],"position":{"start":{"line":138,"column":1,"offset":6426},"end":{"line":138,"column":380,"offset":6805}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT *\nFROM images \nWHERE user_id in (1,2,3); </code></pre></div>","position":{"start":{"line":140,"column":1,"offset":6807},"end":{"line":144,"column":4,"offset":6863}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And I have used it extensively in my current project, will have a separate blog for the same.","position":{"start":{"line":146,"column":1,"offset":6865},"end":{"line":146,"column":94,"offset":6958}}}],"position":{"start":{"line":146,"column":1,"offset":6865},"end":{"line":146,"column":94,"offset":6958}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"freedoom-to-the-clients-could-be-dangerous","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#freedoom-to-the-clients-could-be-dangerous","aria-label":"freedoom to the clients could be dangerous permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Freedoom to the Clients could be dangerous","position":{"start":{"line":148,"column":3,"offset":6962},"end":{"line":148,"column":45,"offset":7004}}}],"position":{"start":{"line":148,"column":1,"offset":6960},"end":{"line":148,"column":45,"offset":7004}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"GraphQL provides autonomy to the clients to execute queries to get exactly what they need. This is an amazing feature however, it could be a bit controversial as it could also mean that users can ask for as many fields in as many resources as they want. for example","position":{"start":{"line":150,"column":1,"offset":7006},"end":{"line":150,"column":266,"offset":7271}}}],"position":{"start":{"line":150,"column":1,"offset":7006},"end":{"line":150,"column":266,"offset":7271}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">query users {\n id\n name\n  posts {\n    id\n    description\n    comments {\n      user {\n        id\n        name\n        posts {\n          id\n          description\n          comments {\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}</code></pre></div>","position":{"start":{"line":152,"column":1,"offset":7273},"end":{"line":177,"column":4,"offset":7572}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This query could potentially get tens of thousands of data in response and could even kill your server.","position":{"start":{"line":179,"column":1,"offset":7574},"end":{"line":179,"column":104,"offset":7677}}}],"position":{"start":{"line":179,"column":1,"offset":7574},"end":{"line":179,"column":104,"offset":7677}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Therefore, as much as it is a good thing to allow users to request for whatever they need, at certain levels of complexity, requests like this can slow down performs and immensely affect the efficiency of GraphQL applications.","position":{"start":{"line":181,"column":1,"offset":7679},"end":{"line":181,"column":227,"offset":7905}}}],"position":{"start":{"line":181,"column":1,"offset":7679},"end":{"line":181,"column":227,"offset":7905}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To avoid the mentioned problem, we can configue the Maximum Query Depth using which we could prevent the clients from abusing query depth like this. Do read the ","position":{"start":{"line":183,"column":1,"offset":7907},"end":{"line":183,"column":162,"offset":8068}}},{"type":"element","tagName":"a","properties":{"href":"https://www.howtographql.com/advanced/4-security/","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"amazing article","position":{"start":{"line":183,"column":163,"offset":8069},"end":{"line":183,"column":178,"offset":8084}}}],"position":{"start":{"line":183,"column":162,"offset":8068},"end":{"line":183,"column":230,"offset":8136}}},{"type":"text","value":" to get to know about the few strategies to mitigate these types of risks.","position":{"start":{"line":183,"column":230,"offset":8136},"end":{"line":183,"column":304,"offset":8210}}}],"position":{"start":{"line":183,"column":1,"offset":7907},"end":{"line":183,"column":304,"offset":8210}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"duplication-of-schemas","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#duplication-of-schemas","aria-label":"duplication of schemas permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Duplication of Schemas","position":{"start":{"line":185,"column":3,"offset":8214},"end":{"line":185,"column":25,"offset":8236}}}],"position":{"start":{"line":185,"column":1,"offset":8212},"end":{"line":185,"column":25,"offset":8236}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When building with GraphQL on the backend, you would have some duplication and code repetition especially when it comes to schemas. First, you need a schema for your database(data models) and another for your GraphQL endpoint, this involves similar but, not quite identical code, especially when it comes to schemas.","position":{"start":{"line":187,"column":1,"offset":8238},"end":{"line":187,"column":317,"offset":8554}}}],"position":{"start":{"line":187,"column":1,"offset":8238},"end":{"line":187,"column":317,"offset":8554}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is really difficult that you have to write very similar code for your schemas and data models, but it’s even more frustrating that you also have to continually keep them in sync.","position":{"start":{"line":189,"column":1,"offset":8556},"end":{"line":189,"column":182,"offset":8737}}}],"position":{"start":{"line":189,"column":1,"offset":8556},"end":{"line":189,"column":182,"offset":8737}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Apparently, efforts have been made in the GraphQL community to fix it. PostGraphile, Prisma, Hasura etc. these tools generates a GraphQL schema from your database schema.","position":{"start":{"line":191,"column":1,"offset":8739},"end":{"line":191,"column":171,"offset":8909}}}],"position":{"start":{"line":191,"column":1,"offset":8739},"end":{"line":191,"column":171,"offset":8909}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"my-take","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#my-take","aria-label":"my take permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"My Take","position":{"start":{"line":193,"column":3,"offset":8913},"end":{"line":193,"column":10,"offset":8920}}}],"position":{"start":{"line":193,"column":1,"offset":8911},"end":{"line":193,"column":10,"offset":8920}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The conclusion I arrived at when writing my GraphQL server was that GraphQL is not the elixir I thought it was. Though, all the features it advertised sounded incredible.\nLearning the schema language of GraphQL was not difficult. Once you learn about schemas, resolvers, object types, query and mutation you are ready to write your GraphQL server.","position":{"start":{"line":195,"column":1,"offset":8922},"end":{"line":196,"column":177,"offset":9269}}}],"position":{"start":{"line":195,"column":1,"offset":8922},"end":{"line":196,"column":177,"offset":9269}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The only major problem I see with GraphQL is (N+1) DB hits, for which ","position":{"start":{"line":198,"column":1,"offset":9271},"end":{"line":198,"column":71,"offset":9341}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Dataloaders","position":{"start":{"line":198,"column":73,"offset":9343},"end":{"line":198,"column":84,"offset":9354}}}],"position":{"start":{"line":198,"column":71,"offset":9341},"end":{"line":198,"column":86,"offset":9356}}},{"type":"text","value":" was introduced to resque but, coming from the REST background sometimes, I get confused while writing the GraphQL schemas say for example","position":{"start":{"line":198,"column":86,"offset":9356},"end":{"line":198,"column":224,"offset":9494}}}],"position":{"start":{"line":198,"column":1,"offset":9271},"end":{"line":198,"column":224,"offset":9494}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type Query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">questions</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Question<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\ntype Question <span class=\"token punctuation\">{</span>\n\tid<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token operator\">!</span>\n\ttitle<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n\ttype<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n\toptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Option<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":200,"column":1,"offset":9496},"end":{"line":211,"column":4,"offset":9641}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, here either I can define options as a field resolver and use Dataloader or get the entire data in a single query using joins which more sounds like a REST. So, In order to decide I think of the clients who are going to use these APIs. I would not use GraphQL in a simple application (for example, one that uses a few fields in the same way, every time) as it would add more complexity. but if I would have various clients, with different data requirements, I would use GraphQL without a doubt.","position":{"start":{"line":213,"column":1,"offset":9643},"end":{"line":213,"column":498,"offset":10140}}}],"position":{"start":{"line":213,"column":1,"offset":9643},"end":{"line":213,"column":498,"offset":10140}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":214,"column":1,"offset":10141}}}}