{"expireTime":9007200894071118000,"key":"transformer-remark-markdown-ast-2678b18e45d14801bde48f594ca03354-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Normalization","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":16,"offset":16},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":18,"offset":18},"indent":[]}},{"type":"text","value":" is the process of efficiently organizing data.\nIn the case of the backend, we generally store the data in the database\nand apply some normalization techniques to eliminate redundant data \n(for example, storing the same data in more than one table) \nand ensuring data dependencies make sense (only storing related data in a table).","position":{"start":{"line":2,"column":18,"offset":18},"end":{"line":6,"column":82,"offset":349},"indent":[1,1,1,1]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":6,"column":82,"offset":349},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Traditionally, client-side applications were only used to show \nthe data coming from the backend with minimal business logic.\nBut with the advent of SPA and various libraries around it like\n","position":{"start":{"line":8,"column":1,"offset":351},"end":{"line":11,"column":1,"offset":541},"indent":[1,1,1]}},{"type":"link","title":null,"url":"https://reactjs.org/","children":[{"type":"text","value":"React","position":{"start":{"line":11,"column":2,"offset":542},"end":{"line":11,"column":7,"offset":547},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":541},"end":{"line":11,"column":30,"offset":570},"indent":[]},"data":{"hProperties":{"target":"_blank","rel":"nofollow noopener noreferrer"}}},{"type":"text","value":"\nand\n","position":{"start":{"line":11,"column":30,"offset":570},"end":{"line":13,"column":1,"offset":575},"indent":[1,1]}},{"type":"link","title":null,"url":"https://vuejs.org/","children":[{"type":"text","value":"Vue","position":{"start":{"line":13,"column":2,"offset":576},"end":{"line":13,"column":5,"offset":579},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":575},"end":{"line":13,"column":26,"offset":600},"indent":[]},"data":{"hProperties":{"target":"_blank","rel":"nofollow noopener noreferrer"}}},{"type":"text","value":"\netc., client applications have now evolved, have become more complex and, \nnow they are capable of managing the data as well.\nSo, to store and manage the data,\nwe use some state management tools like\n","position":{"start":{"line":13,"column":26,"offset":600},"end":{"line":18,"column":1,"offset":801},"indent":[1,1,1,1,1]}},{"type":"link","title":null,"url":"https://redux.js.org/","children":[{"type":"text","value":"Redux","position":{"start":{"line":18,"column":2,"offset":802},"end":{"line":18,"column":7,"offset":807},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":801},"end":{"line":18,"column":31,"offset":831},"indent":[]},"data":{"hProperties":{"target":"_blank","rel":"nofollow noopener noreferrer"}}},{"type":"text","value":".","position":{"start":{"line":18,"column":31,"offset":831},"end":{"line":18,"column":32,"offset":832},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":351},"end":{"line":18,"column":32,"offset":832},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The idea of Redux is simple: the whole state of the application \nis contained in one central location. We need to define Action Types/Creators, \nPure Reducers, and Store that is it.","position":{"start":{"line":20,"column":1,"offset":834},"end":{"line":22,"column":37,"offset":1015},"indent":[1,1]}}],"position":{"start":{"line":20,"column":1,"offset":834},"end":{"line":22,"column":37,"offset":1015},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Before getting into the ","position":{"start":{"line":24,"column":1,"offset":1017},"end":{"line":24,"column":25,"offset":1041},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Normalization","position":{"start":{"line":24,"column":27,"offset":1043},"end":{"line":24,"column":40,"offset":1056},"indent":[]}}],"position":{"start":{"line":24,"column":25,"offset":1041},"end":{"line":24,"column":42,"offset":1058},"indent":[]}},{"type":"text","value":", let us see how data flows in Redux.","position":{"start":{"line":24,"column":42,"offset":1058},"end":{"line":24,"column":79,"offset":1095},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1017},"end":{"line":24,"column":79,"offset":1095},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"redux-async-data-flow.gif","alt":"alt","position":{"start":{"line":26,"column":1,"offset":1097},"end":{"line":26,"column":34,"offset":1130},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1097},"end":{"line":26,"column":34,"offset":1130},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://redux.js.org/tutorials/fundamentals/part-6-async-logic#redux-async-data-flow","children":[{"type":"text","value":"Image Credit","position":{"start":{"line":28,"column":2,"offset":1133},"end":{"line":28,"column":14,"offset":1145},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1132},"end":{"line":28,"column":101,"offset":1232},"indent":[]},"data":{"hProperties":{"target":"_blank","rel":"nofollow noopener noreferrer"}}}],"position":{"start":{"line":28,"column":1,"offset":1132},"end":{"line":28,"column":101,"offset":1232},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The work done by Redux generally falls into two major areas:","position":{"start":{"line":30,"column":1,"offset":1234},"end":{"line":30,"column":61,"offset":1294},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1234},"end":{"line":30,"column":61,"offset":1294},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Processing actions in middleware(calling an API).","position":{"start":{"line":31,"column":4,"offset":1298},"end":{"line":31,"column":53,"offset":1347},"indent":[]}}],"position":{"start":{"line":31,"column":4,"offset":1298},"end":{"line":31,"column":53,"offset":1347},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1295},"end":{"line":31,"column":53,"offset":1347},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Calling the Reducers to update the state (including object duplication for immutable updates).","position":{"start":{"line":32,"column":4,"offset":1351},"end":{"line":32,"column":98,"offset":1445},"indent":[]}}],"position":{"start":{"line":32,"column":4,"offset":1351},"end":{"line":32,"column":98,"offset":1445},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1348},"end":{"line":32,"column":98,"offset":1445},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1295},"end":{"line":32,"column":98,"offset":1445},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"It is certainly possible for each of these to become a performance concern \nin complex situations. \nWe can increase the performance by improving the state shape.","position":{"start":{"line":34,"column":1,"offset":1447},"end":{"line":36,"column":62,"offset":1608},"indent":[1,1]}}],"position":{"start":{"line":34,"column":1,"offset":1447},"end":{"line":36,"column":62,"offset":1608},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let us understand how denormalized state shape could be a performance bottleneck. \nSuppose we are building an online Chat room. \nHere our data would be nested in nature. \nFor example, each Chat room has multiple users and, \neach user would belong to multiple Chat rooms. \nData for this kind of application might look like:","position":{"start":{"line":38,"column":1,"offset":1610},"end":{"line":43,"column":51,"offset":1932},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":38,"column":1,"offset":1610},"end":{"line":43,"column":51,"offset":1932},"indent":[1,1,1,1,1]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> chatRooms <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom1'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'general'</span><span class=\"token punctuation\">,</span>\n    users<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">'user1'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span>\n        belongToRooms<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom1'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'general'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom2'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'random'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">'user2'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Smith'</span>\n        belongToRooms<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom1'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'general'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom2'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'random'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom2'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'random'</span><span class=\"token punctuation\">,</span>\n    users<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">'user1'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span>\n        belongToRooms<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom1'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'general'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom2'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'random'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">'user2'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Smith'</span>\n        belongToRooms<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom1'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'general'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom2'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'random'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>","position":{"start":{"line":45,"column":1,"offset":1934},"end":{"line":94,"column":4,"offset":2857},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The structure of this data is a bit complex, and some of the data is repeated. \nLet us see, how our reducer would look like if we need to delete/update the particular Chat room.","position":{"start":{"line":97,"column":1,"offset":2860},"end":{"line":98,"column":98,"offset":3037},"indent":[1]}}],"position":{"start":{"line":97,"column":1,"offset":2860},"end":{"line":98,"column":98,"offset":3037},"indent":[1]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">DELETE_CHAT_ROOM</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> roomId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">;</span> \n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> chatRooms <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> indexOfChatRoomToBeDeleted <span class=\"token operator\">=</span> chatRooms<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chatRoom</span> <span class=\"token operator\">=></span> chatRoom<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> roomId<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// Delete Chat room</span>\n\n      chatRooms<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>indexOfChatRoomToBeDeleted<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n       <span class=\"token comment\">// Delete Chat room from the users</span>\n\n      chatRooms<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chatRoom</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        chatRoom<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          \n          <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> \n            user<span class=\"token punctuation\">.</span>belongToRooms<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chatRoom</span> <span class=\"token operator\">=></span> chatRoom<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> roomId<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            user<span class=\"token punctuation\">.</span>belongToRooms<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":100,"column":1,"offset":3039},"end":{"line":134,"column":4,"offset":3789},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"emphasis","children":[{"type":"text","value":"Note: Redux does not allow to mutate the old state so, to avoid the duplication complexity and for the example purpose, we are mutating the state directly.","position":{"start":{"line":136,"column":4,"offset":3794},"end":{"line":136,"column":159,"offset":3949},"indent":[]}}],"position":{"start":{"line":136,"column":3,"offset":3793},"end":{"line":136,"column":160,"offset":3950},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":3791},"end":{"line":136,"column":162,"offset":3952},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":3791},"end":{"line":136,"column":162,"offset":3952},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That is why unnormalized data is a concern for several reasons:","position":{"start":{"line":138,"column":1,"offset":3954},"end":{"line":138,"column":64,"offset":4017},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":3954},"end":{"line":138,"column":64,"offset":4017},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When we have duplicated data in several places,\nit becomes harder to make sure it is updated appropriately.","position":{"start":{"line":139,"column":3,"offset":4020},"end":{"line":140,"column":62,"offset":4129},"indent":[3]}}],"position":{"start":{"line":139,"column":3,"offset":4020},"end":{"line":140,"column":62,"offset":4129},"indent":[3]}}],"position":{"start":{"line":139,"column":1,"offset":4018},"end":{"line":140,"column":62,"offset":4129},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When we have nested structures, we need to create complex reducers\nwhich would parse the entire state tree to update the single field.","position":{"start":{"line":141,"column":3,"offset":4132},"end":{"line":142,"column":70,"offset":4268},"indent":[3]}}],"position":{"start":{"line":141,"column":3,"offset":4132},"end":{"line":142,"column":70,"offset":4268},"indent":[3]}}],"position":{"start":{"line":141,"column":1,"offset":4130},"end":{"line":142,"column":70,"offset":4268},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"An update to a deeply nested data object could force unrelated UI components\nto re-render even if the data did not change.","position":{"start":{"line":143,"column":3,"offset":4271},"end":{"line":144,"column":48,"offset":4395},"indent":[3]}}],"position":{"start":{"line":143,"column":3,"offset":4271},"end":{"line":144,"column":48,"offset":4395},"indent":[3]}}],"position":{"start":{"line":143,"column":1,"offset":4269},"end":{"line":144,"column":48,"offset":4395},"indent":[1]}}],"position":{"start":{"line":139,"column":1,"offset":4018},"end":{"line":144,"column":48,"offset":4395},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So, to avoid all of the above issues, Normalization comes to the rescue.\nIt is a similar technique to what we generally do at the database level.","position":{"start":{"line":146,"column":1,"offset":4397},"end":{"line":147,"column":73,"offset":4542},"indent":[1]}}],"position":{"start":{"line":146,"column":1,"offset":4397},"end":{"line":147,"column":73,"offset":4542},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Creating a separate table for each entity, whereas in the Redux store\nwe would treat all the entities as separate slices of a state\nand create separate reducers for each of them.","position":{"start":{"line":149,"column":3,"offset":4546},"end":{"line":151,"column":48,"offset":4726},"indent":[2,2]}}],"position":{"start":{"line":149,"column":3,"offset":4546},"end":{"line":151,"column":48,"offset":4726},"indent":[2,2]}}],"position":{"start":{"line":149,"column":1,"offset":4544},"end":{"line":151,"column":48,"offset":4726},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We have primary keys on the data table,\nwhereas in the Redux store we store the individual entities in an object,\nwith the IDs of the entities as keys and the entities themselves as the values.","position":{"start":{"line":152,"column":3,"offset":4729},"end":{"line":154,"column":81,"offset":4924},"indent":[2,2]}}],"position":{"start":{"line":152,"column":3,"offset":4729},"end":{"line":154,"column":81,"offset":4924},"indent":[2,2]}}],"position":{"start":{"line":152,"column":1,"offset":4727},"end":{"line":154,"column":81,"offset":4924},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"At the database level, we store the references as IDs,\nsimilarly here in Redux store references to individual entities\nshould be done by storing the ID only.","position":{"start":{"line":155,"column":3,"offset":4927},"end":{"line":157,"column":41,"offset":5088},"indent":[3,3]}}],"position":{"start":{"line":155,"column":3,"offset":4927},"end":{"line":157,"column":41,"offset":5088},"indent":[3,3]}}],"position":{"start":{"line":155,"column":1,"offset":4925},"end":{"line":157,"column":41,"offset":5088},"indent":[1,1]}}],"position":{"start":{"line":149,"column":1,"offset":4544},"end":{"line":157,"column":41,"offset":5088},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As we are treating the Redux store like a database,\nmany of the principles of database design apply here as well.\nFor example, in our case Chat room and the user have a many-to-many relationship,\nwe can model that using an intermediate entity called as chatRoomUser\nthat stores the IDs of the Chat room and User entities.","position":{"start":{"line":159,"column":1,"offset":5090},"end":{"line":163,"column":56,"offset":5411},"indent":[1,1,1,1]}}],"position":{"start":{"line":159,"column":1,"offset":5090},"end":{"line":163,"column":56,"offset":5411},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So, after normalization our slices of state\nand their corresponding reducers would look like:-","position":{"start":{"line":165,"column":1,"offset":5413},"end":{"line":166,"column":51,"offset":5507},"indent":[1]}}],"position":{"start":{"line":165,"column":1,"offset":5413},"end":{"line":166,"column":51,"offset":5507},"indent":[1]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> chatRooms <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  byId<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'chatRoom1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom1'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'general'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'chatRoom2'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom2'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'random'</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  byId<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'user1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'user1'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'user2'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'user2'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Smith'</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> chatRoomUsers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  byId<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'chatRoomUser1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoomUser1'</span><span class=\"token punctuation\">,</span> chatRoomId<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom1'</span><span class=\"token punctuation\">,</span> userId<span class=\"token operator\">:</span> <span class=\"token string\">'user1'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'chatRoomUser2'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoomUser2'</span><span class=\"token punctuation\">,</span> chatRoomId<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom2'</span><span class=\"token punctuation\">,</span> userId<span class=\"token operator\">:</span> <span class=\"token string\">'user2'</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":168,"column":1,"offset":5509},"end":{"line":191,"column":4,"offset":6003},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// chatRoomReducer</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">DELETE_CHAT_ROOM</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> roomId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">;</span> \n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> chatRooms <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">delete</span> chatRooms<span class=\"token punctuation\">.</span>byId<span class=\"token punctuation\">[</span>roomId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// chatRoomUserReducer</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">DELETE_CHAT_ROOM_USER</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> roomId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">;</span> \n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> chatRoomUsers <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> chatRoomUsersIdsToBeDeleted <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>chatRoomUsers<span class=\"token punctuation\">.</span>byId<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span>chatRoomId <span class=\"token operator\">===</span> roomId<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      chatRoomUsersIdsToBeDeleted<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chatRoomUserId</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">delete</span> chatRoomUsers<span class=\"token punctuation\">.</span>byId<span class=\"token punctuation\">[</span>chatRoomUserId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":193,"column":1,"offset":6005},"end":{"line":228,"column":4,"offset":6790},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now our state structure has become flat and, it has several advantages:-","position":{"start":{"line":230,"column":1,"offset":6792},"end":{"line":230,"column":73,"offset":6864},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":6792},"end":{"line":230,"column":73,"offset":6864},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We have to update the slice of the state,\nno parsing of an entire state tree.","position":{"start":{"line":231,"column":3,"offset":6867},"end":{"line":232,"column":38,"offset":6946},"indent":[3]}}],"position":{"start":{"line":231,"column":3,"offset":6867},"end":{"line":232,"column":38,"offset":6946},"indent":[3]}}],"position":{"start":{"line":231,"column":1,"offset":6865},"end":{"line":232,"column":38,"offset":6946},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Lookup has become simple like a dictionary\nwith a given chatRoomId or userId you can find an element in O(1).","position":{"start":{"line":233,"column":3,"offset":6949},"end":{"line":234,"column":69,"offset":7060},"indent":[3]}}],"position":{"start":{"line":233,"column":3,"offset":6949},"end":{"line":234,"column":69,"offset":7060},"indent":[3]}}],"position":{"start":{"line":233,"column":1,"offset":6947},"end":{"line":234,"column":69,"offset":7060},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No complex reducers.","position":{"start":{"line":235,"column":3,"offset":7063},"end":{"line":235,"column":23,"offset":7083},"indent":[]}}],"position":{"start":{"line":235,"column":3,"offset":7063},"end":{"line":235,"column":23,"offset":7083},"indent":[]}}],"position":{"start":{"line":235,"column":1,"offset":7061},"end":{"line":235,"column":23,"offset":7083},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Since each entity is separated, an update like changing the name of a Chat room would only require new copies of the “chatRooms > byId > chatRoom” portion of the tree.\nIt means the fewer portion of the State gets updates which result in fewer re-renders.","position":{"start":{"line":236,"column":3,"offset":7086},"end":{"line":237,"column":87,"offset":7340},"indent":[1]}}],"position":{"start":{"line":236,"column":3,"offset":7086},"end":{"line":237,"column":87,"offset":7340},"indent":[1]}}],"position":{"start":{"line":236,"column":1,"offset":7084},"end":{"line":237,"column":87,"offset":7340},"indent":[1]}}],"position":{"start":{"line":231,"column":1,"offset":6865},"end":{"line":237,"column":87,"offset":7340},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It is important to normalize the state before it can be included in the state tree\nbecause APIs frequently send back data in a nested form.","position":{"start":{"line":239,"column":1,"offset":7342},"end":{"line":240,"column":57,"offset":7481},"indent":[1]}}],"position":{"start":{"line":239,"column":1,"offset":7342},"end":{"line":240,"column":57,"offset":7481},"indent":[1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":241,"column":1,"offset":7482}}}}