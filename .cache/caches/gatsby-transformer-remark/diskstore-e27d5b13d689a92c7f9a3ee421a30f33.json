{"expireTime":9007200911358258000,"key":"transformer-remark-markdown-html-5f7485db87c536126879152769fd750f-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<p><a href=\"https://blog.saeloun.com/2020/02/14/rails-6-multiple-database-support.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rails 6</a>\nhad added the support for multiple database connections\nusing which we can configure the separate databases for reads and writes. </p>\n<p>For example, we have two databases <code class=\"language-text\">write_database</code> and <code class=\"language-text\">read_database</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  /config/database.yml\n\n  default: &amp;default\n    adapter: postgresql\n    encoding: unicode\n    host: &lt;%= ENV[&#39;PG_HOST&#39;] || &#39;localhost&#39; %&gt;\n    pool: 5\n    username: &lt;%= ENV[&#39;PG_USER&#39;] || &#39;postgres&#39; %&gt;\n    password: &lt;%= ENV[&#39;PG_PASSWORD&#39;] || &#39;postgres&#39; %&gt;\n\n  development:\n    write_database:\n      &lt;&lt;: *default\n      database: &lt;%= &quot;write_database&quot; %&gt;\n\n    read_database:\n      &lt;&lt;: *default\n      database: &lt;%= &quot;read_database&quot; %&gt;</code></pre></div>\n<p>Now to use the above-defined databases,\nwe need to set up the Active Record model.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  app/models/application_record.rb\n\n  class ApplicationRecord &lt; ActiveRecord::Base\n    self.abstract_class = true\n    connects_to database: { writing: :write_database, reading: :read_database }\n  end\n\n  app/models/product.rb\n\n  class Product &lt; ApplicationRecord\n    validates :name, presence: true\n    validates :description, presence: true\n  end</code></pre></div>\n<p>And to enable the automatic switching between the databases\nbased on the HTTP Verb we need to add the below configuration. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  config/application.rb\n\n  module MultiDBApp\n    class Application &lt; Rails::Application\n      config.active_record.database_selector = { delay: 2.seconds }\n      config.active_record.database_resolver = ActiveRecord::Middleware::DatabaseSelector::Resolver\n      config.active_record.database_resolver_context = ActiveRecord::Middleware::DatabaseSelector::Resolver::Session\n    end\n  end</code></pre></div>\n<p>Using the above configuration\nRails looks for the <code class=\"language-text\">reading_request?</code> method\ndefined in the middleware <code class=\"language-text\">ActiveRecord::Middleware::Middleware::DatabaseSelector</code>,\nits default implementation is true for GET and HEAD requests,\nwhich means for POST, PUT, DELETE, or PATCH request\nthe application will automatically write to the <code class=\"language-text\">write_database</code>\nand for read, it will use <code class=\"language-text\">read_database</code>.</p>\n<p><strong>Note:- According to the\n<a href=\"https://guides.rubyonrails.org/active_record_multiple_databases.html#activating-automatic-role-switching\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a>\nwe are supposed to add the above configuration in\ninitializers(/config/initializers/multi_db.rb)\nbut this is broken in Rails latest release so as suggested here in the\n<a href=\"https://github.com/rails/rails/issues/45162#issuecomment-1135072689\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rails issue</a>,\nwe need to add the config in <code class=\"language-text\">application.rb</code></strong></p>\n<h4 id=\"before\" style=\"position:relative;\"><a href=\"#before\" aria-label=\"before permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Before</h4>\n<p>Let us call a <code class=\"language-text\">create_product</code>(POST) API to create a Product.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  POST:- http://localhost:3000/products\n\n  Body:- { name: &quot;Detergent&quot;, description: &quot;A mixture of surfactants with cleansing properties&quot; }\n\n  Response:- \n  \n  {\n    &quot;id&quot;: 1,\n    &quot;name&quot;: &quot;Detergent&quot;,\n    &quot;description&quot;: &quot;A mixture of surfactants with cleansing properties&quot;,\n    &quot;created_at&quot;: &quot;2022-06-14T06:25:25.877Z&quot;,\n    &quot;updated_at&quot;: &quot;2022-06-14T06:25:25.877Z&quot;\n  }</code></pre></div>\n<p>So, as expected, the product is created successfully in <code class=\"language-text\">write_database</code>.</p>\n<p>If we call a <code class=\"language-text\">get_product</code>(GET) API,\nit says product not found because,\nthe GET request will be redirected to <code class=\"language-text\">read_database</code>,\nand that does not have a Product that we created recently.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  GET:- http://localhost:3000/products/1\n\n  Response:-\n  \n  {\n    &quot;error&quot;: &quot;product with id 1 not found&quot;\n  }</code></pre></div>\n<p>So, this is working as expected. Now suppose,\nif we call a GraphQL API to read the particular product.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  GraphQL API:-\n  \n  {\n    product(id: 1) {\n      id\n      name\n      description\n    }\n  }\n\n  Response:-\n\n  {\n    &quot;data&quot;: {\n      &quot;product&quot;: {\n        &quot;id&quot;: &quot;1&quot;,\n        &quot;title&quot;: &quot;Detergent&quot;,\n        &quot;description&quot;: &quot;A mixture of surfactants with cleansing properties&quot;\n      }\n    }\n  }</code></pre></div>\n<p>Whoa!!! We get the Product details back,\nideally, it should respond with a <code class=\"language-text\">not_found</code> error\nbecause it is a read request,\nbut GraphQL API uses the POST HTTP method and\naccording to the default implementation POST requests get redirected to the <code class=\"language-text\">write_database</code>.</p>\n<h4 id=\"after\" style=\"position:relative;\"><a href=\"#after\" aria-label=\"after permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>After</h4>\n<p>To fix this,\nRails has moved <code class=\"language-text\">reading_request?</code>\nmethod from the <code class=\"language-text\">ActiveRecord::Middleware::Middleware::DatabaseSelector</code>\nto the <code class=\"language-text\">ActiveRecord::Middleware::DatabaseSelector::Resolver</code> class,\nso that we can override and create custom Resolver.</p>\n<p>Let us create a custom resolver\nand override the <code class=\"language-text\">reading_request?</code> method to add the validations for a GraphQL API.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  class CustomResolver &lt; ActiveRecord::Middleware::DatabaseSelector::Resolver\n    def reading_request?(request)\n      graphql_read = request.post? &amp;&amp; request.path == &quot;/graphql&quot; &amp;&amp; !request.params[:query]&amp;.include?(&quot;mutation&quot;)\n      graphql_read || super\n    end\n  end\n\n  module MultiDBApp\n    class Application &lt; Rails::Application\n      config.load_defaults 7.1\n    \n      config.active_record.database_selector = { delay: 2.seconds }\n      config.active_record.database_resolver = CustomResolver\n      config.active_record.database_resolver_context = ActiveRecord::Middleware::DatabaseSelector::Resolver::Session\n    end\n  end</code></pre></div>\n<p>So, our custom <code class=\"language-text\">reading_request?</code> checks if the request is POST,\ntype is GraphQL and params doesn’t have <code class=\"language-text\">mutation</code>\nthen consider it as a read request and redirect it to the <code class=\"language-text\">read_database</code>.</p>\n<p>Now, if we call a GraphQL API again to read the particular product.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  GraphQL API:-\n  \n  {\n    product(id: 1) {\n      id\n      name\n      description\n    }\n  }\n\n  Response:-\n\n  {\n    &quot;errors&quot;: [\n      {\n        &quot;message&quot;: &quot;Couldn&#39;t find Product with &#39;id&#39;=1&quot;\n      }\n    ]\n  }</code></pre></div>\n<p>It responds with a <code class=\"language-text\">not_found</code> message,\nwhich is expected because <code class=\"language-text\">read_database</code> doesn’t have a Product record.</p>\n<p><strong>Note: The enhancement is yet to be released in the official Rails version</strong></p>\n<p>Check out\n<a href=\"https://github.com/rails/rails/pull/44944\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the PR</a>\nfor more details.</p>"}