{"expireTime":9007200894070181000,"key":"transformer-remark-markdown-html-e1ea4782840dad8006aa0d936aa02103-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<p>In React apps, there are at least seven ways to handle the state.\nLet us briefly explore a few of them in this part.</p>\n<h4 id=\"url\" style=\"position:relative;\"><a href=\"#url\" aria-label=\"url permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URL</h4>\n<p>We can use URL to store some data e.g.</p>\n<ul>\n<li>The id of the current item, being viewed</li>\n<li>Filter parameters</li>\n<li>Pagination offset and limit</li>\n<li>Sorting data</li>\n</ul>\n<p>Keeping such data in the URL allows users to share deep links with others.</p>\n<p>It is recommended to avoid storing such information in the app’s state\nto avoid the URL in our app getting out of sync.\nThe URL should be used as the system of record,\nRead from it as needed for information related to sorting, pagination, etc.\nUpdate the URL as required when the settings change</p>\n<p>React Router is a great tool to handle routes and manage the params.</p>\n<p>{% highlight javascript %}\nGET:- <a href=\"https://example.com/products/23\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://example.com/products/23</a></p>\n<p>import React, { useState, useEffect } from ‘react’;\nimport ReactDOM from ‘react-dom’;\nimport { BrowserRouter as Router, Route, Link, Switch, useParams } from “react-router-dom”;</p>\n<p>  export default function URLExample() {\nreturn (\n<Router>\n<div>\n<h2>Products</h2>\n<ul>\n<li>\n<Link to=\"/products/23\">Product Details</Link>\n</li>\n</ul>\n<Switch>\n<Route path=\"/products/:id\" component={ProductDetails} />\n</Switch>\n</div>\n</Router>\n);\n}</p>\n<p>  function ProductDetails() {\n// We can use the <code class=\"language-text\">useParams</code> hook here to access\n// the dynamic pieces of the URL.\nlet { id } = useParams();</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">return (\n  &lt;div&gt;\n    &lt;h3&gt;ProductID: {id}&lt;/h3&gt;\n  &lt;/div&gt;\n);</code></pre></div>\n<p>  }\n{% endhighlight %}</p>\n<p>We do not need to store the id in a state\nor pass it as props to the <code class=\"language-text\">ProductDetails</code> component instead,\nit can be fetched using <code class=\"language-text\">useParams()</code>.</p>\n<h4 id=\"web-storage\" style=\"position:relative;\"><a href=\"#web-storage\" aria-label=\"web storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Storage</h4>\n<p>The second option is to store the state in the browser via web storage.\nThis is useful when we want to persist state between reloads and reboots.\nExamples include cookies, local storage, and IndexedDB.\nThese are native browser technologies.</p>\n<p>Data persisted in the browser is tied to a single browser.\nSo, if the user loads the site in a different browser,\nthe data will not be available.</p>\n<p>We avoid storing sensitive data in the browser\nsince the user may access the app on a shared machine.\nSome examples of where web storage might be most useful\ninclude storing a user’s shopping cart,\nsaving partially completed form data\nor storing JWT token in HttpOnly Cookie.</p>\n<p>Here is an example of saving user preferences locally in the browser\nor even persist the complete state for one or more of our components.</p>\n<p>{% highlight javascript %}</p>\n<p>  import React, { useState, useEffect } from ‘react’;</p>\n<p>  function LocalStorage () {\nconst [state, setState] = useState({});</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">useEffect(() =&gt; {\n  const rememberMe = localStorage.getItem(&#39;rememberMe&#39;) === &#39;true&#39;;\n  const user = rememberMe ? localStorage.getItem(&#39;user&#39;) : &#39;&#39;;\n  setState({ user, rememberMe });\n}, []);\n\nfunction handleChange (event) {\n  const input = event.target;\n  let { user, rememberMe } = state;\n  if (input.type === &#39;checkbox&#39;) {\n    rememberMe = input.checked\n  } else {\n    user = input.value\n  }\n  setState({ user, rememberMe });\n}\n\nfunction handleFormSubmit () {\n  const { user, rememberMe } = state;\n  localStorage.setItem(&#39;rememberMe&#39;, rememberMe);\n  localStorage.setItem(&#39;user&#39;, rememberMe ? user : &#39;&#39;);\n};\n\nreturn (\n  &lt;form onSubmit={handleFormSubmit}&gt;\n    &lt;label&gt;\n      User: &lt;input name=&quot;user&quot; value={state.user} onChange={handleChange}/&gt;\n    &lt;/label&gt;\n    &lt;label&gt;\n      &lt;input name=&quot;rememberMe&quot; checked={state.rememberMe} onChange={handleChange} type=&quot;checkbox&quot;/&gt; Remember me\n    &lt;/label&gt;\n    &lt;button type=&quot;submit&quot;&gt;Sign In&lt;/button&gt;\n  &lt;/form&gt;\n);</code></pre></div>\n<p>  }</p>\n<p>{% endhighlight %}</p>\n<h4 id=\"local-state\" style=\"position:relative;\"><a href=\"#local-state\" aria-label=\"local state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Local State</h4>\n<p>The third option is to use store state locally.\nIt is useful when one component needs the state.\nExamples include a toggle button, a form, etc.</p>\n<p>{% highlight javascript %}\nimport React, { useState } from ‘react’;\nimport ReactDOM from ‘react-dom’;</p>\n<p>function PlayerInfo(props) {\nconst [show, setShow] = useState(true);</p>\n<p>  function toggleButton() {\nsetShow(!show)\n}</p>\n<p>  return (\n<div>\n<button onClick={toggleButton}> Toggle </button>\n{show ? props.children : null}\n</div>\n);\n}</p>\n<p>function App() {\nreturn (<PlayerInfo>\n<div>\nPlayer: Smith\n</div>\n</PlayerInfo>)\n}</p>\n<p>export default App;\n{% endhighlight %}</p>\n<h4 id=\"lifted-state\" style=\"position:relative;\"><a href=\"#lifted-state\" aria-label=\"lifted state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lifted State</h4>\n<p>The Fourth option is to define the state in the parent component.\nOften, the same state is used across multiple components.\nIn those cases, it is useful to lift the state to a common parent.\nThe lifting state is a two‑step process.\nFirst, we declare the state in a common parent component,\nand then we pass the state down to child components via props.\nThis pattern should be considered any time a few related components need to use the same state.\nThe lifting state avoids duplicating states in multiple components.\nIt helps to assure that our components all consistently reflect the same state.</p>\n<p>In the below example, we have lifted the state and\nthe <code class=\"language-text\">handleChange</code> event in the parent component, helping to maintain consistency.</p>\n<p>{% highlight javascript %}</p>\n<p>  function PlayerInfo () {\nconst [gender, setGender] = useState(“Male”);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function handleChange (event) {\n  setGender(event.target.value)\n}\n\nreturn (\n  &lt;div&gt;\n    &lt;Dropdown onChoose = {handleChange} /&gt;\n    &lt;Choosen choice = {gender} /&gt;\n  &lt;/div&gt;\n);</code></pre></div>\n<p>  }</p>\n<p>{% endhighlight %}</p>\n<h4 id=\"derived-state\" style=\"position:relative;\"><a href=\"#derived-state\" aria-label=\"derived state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Derived State</h4>\n<p>The fifth option is to compute the new state based on the available state\nand we do not need to declare a state at all.\nIf there are existing values that can be composed to give us the information we need,\nthen we can calculate that information on each render instead of storing it.\nSome examples include calling <code class=\"language-text\">.length</code> on an array to determine the number of records\ninstead of storing a separate <code class=\"language-text\">numItems</code> variable in the state or deriving an <code class=\"language-text\">errorsExist</code> boolean\nby checking if the errors array is empty.</p>\n<p>So, why bother deriving the state?\nWell, deriving the state avoids our state values getting out of sync.\nIt simplifies our code since we do not have to remember to keep separate values in sync.\nWhen we update the state, derived values are automatically recalculated in the render.</p>\n<p>For example, we can calculate the items added to the cart and show it on the cart icon like this,\n<code class=\"language-text\">this.state.cart.items.length</code> and pass it as a prop to Badge Component.\nWe do not need to store the <code class=\"language-text\">itemsCount</code> key in a cart state.\nEach time the cart state gets changed,\nthe count on the Badge will be calculated automatically.</p>\n<p>{% highlight javascript %}</p>\n  <IconButton aria-label=\"cart\">\n    <StyledBadge badgeContent={ {this.state.cart.items.length} } color=\"secondary\">\n      <ShoppingCartIcon />\n    </StyledBadge>\n  </IconButton>\n{% endhighlight %}"}