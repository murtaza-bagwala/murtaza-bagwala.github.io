{"expireTime":9007200894070936000,"key":"transformer-remark-markdown-html-43afd4f48c6512b8a0324591d4264ba5-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<p><strong>Normalization</strong> is the process of efficiently organizing data.\nIn the case of the backend, we generally store the data in the database\nand apply some normalization techniques to eliminate redundant data\n(for example, storing the same data in more than one table)\nand ensuring data dependencies make sense (only storing related data in a table).</p>\n<p>Traditionally, client-side applications were only used to show\nthe data coming from the backend with minimal business logic.\nBut with the advent of SPA and various libraries around it like\n<a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React</a>\nand\n<a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue</a>\netc., client applications have now evolved, have become more complex and,\nnow they are capable of managing the data as well.\nSo, to store and manage the data,\nwe use some state management tools like\n<a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux</a>.</p>\n<p>The idea of Redux is simple: the whole state of the application\nis contained in one central location. We need to define Action Types/Creators,\nPure Reducers, and Store that is it.</p>\n<p>Before getting into the <strong>Normalization</strong>, let us see how data flows in Redux.</p>\n<p>{% include post_image.html file=“redux-async-data-flow.gif” align=“center” %}</p>\n<p><a href=\"https://redux.js.org/tutorials/fundamentals/part-6-async-logic#redux-async-data-flow\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Image Credit</a></p>\n<p>The work done by Redux generally falls into two major areas:</p>\n<ol>\n<li>Processing actions in middleware(calling an API).</li>\n<li>Calling the Reducers to update the state (including object duplication for immutable updates).</li>\n</ol>\n<p>It is certainly possible for each of these to become a performance concern\nin complex situations.\nWe can increase the performance by improving the state shape.</p>\n<p>Let us understand how denormalized state shape could be a performance bottleneck.\nSuppose we are building an online Chat room.\nHere our data would be nested in nature.\nFor example, each Chat room has multiple users and,\neach user would belong to multiple Chat rooms.\nData for this kind of application might look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> chatRooms <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom1'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'general'</span><span class=\"token punctuation\">,</span>\n    users<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">'user1'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span>\n        belongToRooms<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom1'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'general'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom2'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'random'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">'user2'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Smith'</span>\n        belongToRooms<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom1'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'general'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom2'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'random'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom2'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'random'</span><span class=\"token punctuation\">,</span>\n    users<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">'user1'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span>\n        belongToRooms<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom1'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'general'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom2'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'random'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">'user2'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Smith'</span>\n        belongToRooms<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom1'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'general'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom2'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'random'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>The structure of this data is a bit complex, and some of the data is repeated.\nLet us see, how our reducer would look like if we need to delete/update the particular Chat room.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">DELETE_CHAT_ROOM</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> roomId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">;</span> \n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> chatRooms <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> indexOfChatRoomToBeDeleted <span class=\"token operator\">=</span> chatRooms<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chatRoom</span> <span class=\"token operator\">=></span> chatRoom<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> roomId<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// Delete Chat room</span>\n\n      chatRooms<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>indexOfChatRoomToBeDeleted<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n       <span class=\"token comment\">// Delete Chat room from the users</span>\n\n      chatRooms<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chatRoom</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        chatRoom<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          \n          <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> \n            user<span class=\"token punctuation\">.</span>belongToRooms<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chatRoom</span> <span class=\"token operator\">=></span> chatRoom<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> roomId<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            user<span class=\"token punctuation\">.</span>belongToRooms<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endhighlight <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">**</span><span class=\"token operator\">*</span>Note<span class=\"token operator\">:</span> Redux does not allow to mutate the old state so<span class=\"token punctuation\">,</span> to avoid the duplication complexity and <span class=\"token keyword\">for</span> the example purpose<span class=\"token punctuation\">,</span> we are mutating the state directly<span class=\"token punctuation\">.</span><span class=\"token operator\">**</span><span class=\"token operator\">*</span>\n\nThat is why unnormalized data is a concern <span class=\"token keyword\">for</span> several reasons<span class=\"token operator\">:</span>\n<span class=\"token operator\">-</span> When we have duplicated data <span class=\"token keyword\">in</span> several places<span class=\"token punctuation\">,</span>\n  it becomes harder to make sure it is updated appropriately<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">-</span> When we have nested structures<span class=\"token punctuation\">,</span> we need to create complex reducers\n  which would parse the entire state tree to update the single field<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">-</span> An update to a deeply nested data object could force unrelated <span class=\"token constant\">UI</span> components\n  to re<span class=\"token operator\">-</span>render even <span class=\"token keyword\">if</span> the data did not change<span class=\"token punctuation\">.</span>\n\nSo<span class=\"token punctuation\">,</span> to avoid all <span class=\"token keyword\">of</span> the above issues<span class=\"token punctuation\">,</span> Normalization comes to the rescue<span class=\"token punctuation\">.</span>\nIt is a similar technique to what we generally <span class=\"token keyword\">do</span> at the database level<span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">-</span> Creating a separate table <span class=\"token keyword\">for</span> each entity<span class=\"token punctuation\">,</span> whereas <span class=\"token keyword\">in</span> the Redux store\n we would treat all the entities <span class=\"token keyword\">as</span> separate slices <span class=\"token keyword\">of</span> a state\n and create separate reducers <span class=\"token keyword\">for</span> each <span class=\"token keyword\">of</span> them<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">-</span> We have primary keys on the data table<span class=\"token punctuation\">,</span>\n whereas <span class=\"token keyword\">in</span> the Redux store we store the individual entities <span class=\"token keyword\">in</span> an object<span class=\"token punctuation\">,</span>\n <span class=\"token keyword\">with</span> the IDs <span class=\"token keyword\">of</span> the entities <span class=\"token keyword\">as</span> keys and the entities themselves <span class=\"token keyword\">as</span> the values<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">-</span> At the database level<span class=\"token punctuation\">,</span> we store the references <span class=\"token keyword\">as</span> IDs<span class=\"token punctuation\">,</span>\n  similarly here <span class=\"token keyword\">in</span> Redux store references to individual entities\n  should be done by storing the <span class=\"token constant\">ID</span> only<span class=\"token punctuation\">.</span>\n\nAs we are treating the Redux store like a database<span class=\"token punctuation\">,</span>\nmany <span class=\"token keyword\">of</span> the principles <span class=\"token keyword\">of</span> database design apply here <span class=\"token keyword\">as</span> well<span class=\"token punctuation\">.</span>\nFor example<span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> our <span class=\"token keyword\">case</span> Chat room and the user have a many<span class=\"token operator\">-</span>to<span class=\"token operator\">-</span>many relationship<span class=\"token punctuation\">,</span>\nwe can model that using an intermediate entity called <span class=\"token keyword\">as</span> chatRoomUser\nthat stores the IDs <span class=\"token keyword\">of</span> the Chat room and User entities<span class=\"token punctuation\">.</span>\n\nSo<span class=\"token punctuation\">,</span> after normalization our slices <span class=\"token keyword\">of</span> state\nand their corresponding reducers would look like<span class=\"token operator\">:</span><span class=\"token operator\">-</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> highlight javascript <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> chatRooms <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  byId<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'chatRoom1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom1'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'general'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'chatRoom2'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom2'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'random'</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  byId<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'user1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'user1'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'user2'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'user2'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Smith'</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> chatRoomUsers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  byId<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'chatRoomUser1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoomUser1'</span><span class=\"token punctuation\">,</span> chatRoomId<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom1'</span><span class=\"token punctuation\">,</span> userId<span class=\"token operator\">:</span> <span class=\"token string\">'user1'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'chatRoomUser2'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoomUser2'</span><span class=\"token punctuation\">,</span> chatRoomId<span class=\"token operator\">:</span> <span class=\"token string\">'chatRoom2'</span><span class=\"token punctuation\">,</span> userId<span class=\"token operator\">:</span> <span class=\"token string\">'user2'</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endhighlight <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> highlight javascript <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// chatRoomReducer</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">DELETE_CHAT_ROOM</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> roomId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">;</span> \n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> chatRooms <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">delete</span> chatRooms<span class=\"token punctuation\">.</span>byId<span class=\"token punctuation\">[</span>roomId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// chatRoomUserReducer</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">DELETE_CHAT_ROOM_USER</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> roomId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">;</span> \n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> chatRoomUsers <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> chatRoomUsersIdsToBeDeleted <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>chatRoomUsers<span class=\"token punctuation\">.</span>byId<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span>chatRoomId <span class=\"token operator\">===</span> roomId<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      chatRoomUsersIdsToBeDeleted<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chatRoomUserId</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">delete</span> chatRoomUsers<span class=\"token punctuation\">.</span>byId<span class=\"token punctuation\">[</span>chatRoomUserId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endhighlight <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\nNow our state structure has become flat and<span class=\"token punctuation\">,</span> it has several advantages<span class=\"token operator\">:</span><span class=\"token operator\">-</span>\n<span class=\"token operator\">-</span> We have to update the slice <span class=\"token keyword\">of</span> the state<span class=\"token punctuation\">,</span>\n  no parsing <span class=\"token keyword\">of</span> an entire state tree<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">-</span> Lookup has become simple like a dictionary\n  <span class=\"token keyword\">with</span> a given chatRoomId or userId you can find an element <span class=\"token keyword\">in</span> <span class=\"token constant\">O</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">-</span> No complex reducers<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">-</span> Since each entity is separated<span class=\"token punctuation\">,</span> an update like changing the name <span class=\"token keyword\">of</span> a Chat room would only require <span class=\"token keyword\">new</span> <span class=\"token class-name\">copies</span> <span class=\"token keyword\">of</span> the <span class=\"token string\">\"chatRooms > byId > chatRoom\"</span> portion <span class=\"token keyword\">of</span> the tree<span class=\"token punctuation\">.</span>\nIt means the fewer portion <span class=\"token keyword\">of</span> the State gets updates which result <span class=\"token keyword\">in</span> fewer re<span class=\"token operator\">-</span>renders<span class=\"token punctuation\">.</span>\n\nIt is important to normalize the state before it can be included <span class=\"token keyword\">in</span> the state tree\nbecause APIs frequently send back data <span class=\"token keyword\">in</span> a nested form<span class=\"token punctuation\">.</span></code></pre></div>"}