{"expireTime":9007200863407791000,"key":"transformer-remark-markdown-html-acf63626786657a8e5cca0be87df8834-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<p>I still remember those days when Mobile Devs used to argue with the Backend teams regarding the unnecessary data coming in the APIs, and the reason is we used to create the General-Purpose API Backend which could be consumed by any of the clients(Web/Mobile) untill <a href=\"https://samnewman.io/patterns/architectural/bff/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BFF (Backend for Frontend)</a> pattern was introduced by SoundCloud in 2015. But having BFF has its own caveats like, there is a high probability that each BFF may implement similar capabilities with different teams, easily doubling (or more) the cost of development and as we segment backends for each constituent frontend, the number of deployable units increases.</p>\n<p><strong>Does that mean GraphQL is going to replace BFF ?</strong>. Well, some GraphQL literature insists that this new technology gives so much freedom to the client by allowing them to perform ad-hoc queries that you can safely have a single Backend without the drawbacks from REST-based approaches. You can take a look at this amazing <a href=\"https://philcalcado.com/2019/07/12/some_thoughts_graphql_bff.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">article</a> to get more insights of it.</p>\n<p>Well, there are tons of article which explain what GraphQL is and what are its advantages over REST ? but I would like to talk about the ones which I found really useful.</p>\n<h2 id=\"avoid-under-and-over-fetching\" style=\"position:relative;\"><a href=\"#avoid-under-and-over-fetching\" aria-label=\"avoid under and over fetching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Avoid under and over fetching</h2>\n<p>The most powerful feature of graphql is to avoid the problem of under and over-fetching. Basically using GraphQL, we are shifiting the autonomy to the client to request the data as much as it requires <strong><em>no more, no less</em></strong>.</p>\n<p>So, in our case we were working on kind of social media application where we need to show the profile of other users including their images, and basic informations like (relationship status, abut myself etc). and we wanted it to be really blazing fast and with the traditional REST intuitive pattern, this would have required us at least two requests to two endpoints</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>users\n\n<span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>users<span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>profile</code></pre></div>\n<p>But, with GraphQL we can call this single API and prefetch all the data required.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">query users <span class=\"token punctuation\">{</span>\n id\n name\n avatars <span class=\"token punctuation\">{</span>\n\tisProfile<span class=\"token punctuation\">,</span>\n\turl\n <span class=\"token punctuation\">}</span>\n addresses <span class=\"token punctuation\">{</span>\n\ttype<span class=\"token punctuation\">,</span>\n\taddress\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So instead of multiple endpoints that return fixed data structures, a GraphQL server only exposes a single endpoint and responds with precisely the data a client requested.</p>\n<h2 id=\"no-api-versioning\" style=\"position:relative;\"><a href=\"#no-api-versioning\" aria-label=\"no api versioning permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>No API Versioning</h2>\n<p>While using REST, we version API’s when we make changes to the resources or to the structure of the resources we currently have and calling the different versions of an API often times results in weird responses. for example</p>\n<p><code class=\"language-text\">api.domain.com/v1/users\napi.domain.com/v2/users</code></p>\n<p>But, in GraphQL, it is possible to deprecate API’s on a field level. When a particular field is to be deprecated, a client receives a deprecation warning when querying the field. After a while, the deprecated field may be removed from the schema when not many clients are using it anymore. Its too easy to deprecate a field if you are using <a href=\"https://www.apollographql.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">apollo-server</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type userGender <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> Int<span class=\"token operator\">!</span>\n    name<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span> @<span class=\"token function\">deprecated</span><span class=\"token punctuation\">(</span>reason<span class=\"token operator\">:</span> <span class=\"token string\">\"Not Required.\"</span><span class=\"token punctuation\">)</span>\n    createdAt<span class=\"token operator\">:</span> Date<span class=\"token operator\">!</span>\n    updatedAt<span class=\"token operator\">:</span> Date<span class=\"token operator\">!</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>And in GraphQL Playground, it will show the warning</p>\n<p><img src=\"/field-deprecation.png\" alt=\"alt\">\nAs a result, instead of completely versioning the API, it is possible to gradually evolve the API over time without having to restructure the entire API schema.</p>\n<p>Also, adding new fields has no effect on any current clients because you only get the fields you request.</p>\n<h2 id=\"introspectable\" style=\"position:relative;\"><a href=\"#introspectable\" aria-label=\"introspectable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introspectable</h2>\n<p>For REST APIs, we need to use tools like Swagger to document the APIs but, GraphQL comes with its own inbuilt Playground, using which you can see your defined schema, It’s possible to query any GraphQL API to ask it about itself. Every compliant server has a <code class=\"language-text\">__schema</code> field which will allow you to retrieve information about the available fields and types. You can create your query, mutation, subscription etc all out there and see the results.</p>\n<h2 id=\"schema-stiching\" style=\"position:relative;\"><a href=\"#schema-stiching\" aria-label=\"schema stiching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Schema Stiching</h2>\n<p>So, this particular feature, I haven’t got a chance to use it but this feature really embraces the Microservices Archietecture. Here, the backend would be broken down into multiple microservices with distinct functionalities. As a result, each microservice can define its own GraphQL schema.</p>\n<p>Afterward, you could use schema stitching to weave all individual schemas into one general schema which can then be accessed by each of the client applications. In the end, each microservice can have its own GraphQL endpoint whereas one GraphQL API gateway consolidates all schemas into one global schema to make it available to the client applications.</p>\n<p>You can take an in-depth look at GraphQL <a href=\"https://www.apollographql.com/blog/graphql-schema-stitching-8af23354ac37/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Schema Stitching by Sashko Stubailo</a> to get a deeper understanding of the concepts involved.</p>\n<p>So, I have only mentioned the features which I have used and explored but there are lot more remaining and I would love to pen them down here as I use them.</p>\n<h2 id=\"a-big-but\" style=\"position:relative;\"><a href=\"#a-big-but\" aria-label=\"a big but permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A Big “But”</h2>\n<p>So, the above features which I have mentioned don’t come for free. Remember? what Uncle Ben said to Peter Parker <strong><em>With great power comes great responsibility</em></strong>. And here the onus is on the developers, to keep a keen eye on the problems mentioned below.</p>\n<h2 id=\"n1-problem\" style=\"position:relative;\"><a href=\"#n1-problem\" aria-label=\"n1 problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(N+1) Problem</h2>\n<p>The one big gotcha with the GraphQL is (N+1) DB hits, So lets say we have schema like this</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">This</span> is where the name comes from<span class=\"token punctuation\">,</span> by the way<span class=\"token punctuation\">.</span> <span class=\"token class-name\">We</span> will always make <span class=\"token number\">1</span> initial query <span class=\"token keyword\">to</span> the DB and <span class=\"token keyword\">return</span> <span class=\"token class-name\">N</span> results<span class=\"token punctuation\">,</span> which means we will have <span class=\"token keyword\">to</span> make <span class=\"token class-name\">N</span> additional DB queries<span class=\"token punctuation\">.</span> <span class=\"token class-name\">Now</span> <span class=\"token keyword\">this</span> is an intrinsic problem <span class=\"token keyword\">with</span> the <span class=\"token class-name\">GraphQL</span> and <span class=\"token keyword\">to</span> solve <span class=\"token keyword\">this</span> there’s a really handy tool that came out right alongside <span class=\"token class-name\">GraphQL</span> called <span class=\"token class-name\">DataLoader</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token class-name\">Dataloader</span> essentially wait <span class=\"token keyword\">for</span> all your resolvers <span class=\"token keyword\">to</span> load in their individual keys<span class=\"token punctuation\">.</span> <span class=\"token class-name\">Once</span> it has them<span class=\"token punctuation\">,</span> it hits the DB once <span class=\"token keyword\">with</span> the keys<span class=\"token punctuation\">,</span> and returns a promise that resolves an array of the values<span class=\"token punctuation\">.</span> <span class=\"token class-name\">It</span> batches our queries instead of making one at a time<span class=\"token punctuation\">.</span>\n\n<span class=\"token class-name\">And</span> <span class=\"token class-name\">I</span> have used it extensively in my current project<span class=\"token punctuation\">,</span> will have a separate blog <span class=\"token keyword\">for</span> the same<span class=\"token punctuation\">.</span>\n\n##<span class=\"token class-name\">Caching</span>\n\n<span class=\"token class-name\">The</span> goal of caching an API response is primarily <span class=\"token keyword\">to</span> obtain the response from future requests faster<span class=\"token punctuation\">.</span> <span class=\"token class-name\">Unlike</span> <span class=\"token class-name\">GraphQL</span><span class=\"token punctuation\">,</span> caching is built into in the HTTP specification which <span class=\"token class-name\">RESTful</span> <span class=\"token class-name\">APIs</span> are able <span class=\"token keyword\">to</span> leverage<span class=\"token punctuation\">.</span>\n\n<span class=\"token class-name\">With</span> REST we access resources <span class=\"token keyword\">with</span> the <span class=\"token class-name\">URLs</span><span class=\"token punctuation\">,</span> and thus we would be able <span class=\"token keyword\">to</span> cache on a resource level because we have the resource URL as an identifier<span class=\"token punctuation\">.</span> <span class=\"token class-name\">In</span> <span class=\"token class-name\">GraphQL</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span> becomes complex as each query can be different even though it operates on the same entity<span class=\"token punctuation\">.</span>\n\n<span class=\"token class-name\">For</span> example in one query we might be interested in just the name of a <span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> however<span class=\"token punctuation\">,</span> in the next query you might want their addresses<span class=\"token punctuation\">,</span> images etc<span class=\"token punctuation\">.</span> <span class=\"token class-name\">This</span> is the point where caching is mostly complex as it will require field level caching which is not an easy thing <span class=\"token keyword\">to</span> achieve <span class=\"token keyword\">with</span> <span class=\"token class-name\">GraphQL</span> since it <span class=\"token keyword\">uses</span> a single endpoint<span class=\"token punctuation\">.</span>\n\n<span class=\"token class-name\">We</span> could use libraries like <span class=\"token class-name\">Dataloaders</span> <span class=\"token keyword\">to</span> achieve <span class=\"token class-name\">Caching</span> at the <span class=\"token class-name\">Backend</span> but<span class=\"token punctuation\">,</span> still on the client sides <span class=\"token keyword\">this</span> would be really tricky<span class=\"token punctuation\">.</span>\n\n##<span class=\"token class-name\">Freedoom</span> <span class=\"token keyword\">to</span> the <span class=\"token class-name\">Clients</span> could be dangerous\n\n<span class=\"token class-name\">GraphQL</span> <span class=\"token keyword\">provides</span> autonomy <span class=\"token keyword\">to</span> the clients <span class=\"token keyword\">to</span> execute queries <span class=\"token keyword\">to</span> get exactly what they need<span class=\"token punctuation\">.</span> <span class=\"token class-name\">This</span> is an amazing feature however<span class=\"token punctuation\">,</span> it could be a bit controversial as it could also mean that users can ask <span class=\"token keyword\">for</span> as many fields in as many resources as they want<span class=\"token punctuation\">.</span> <span class=\"token keyword\">for</span> example\n\ncode\n\n<span class=\"token class-name\">This</span> query could potentially get tens of thousands of data in response and could even kill your server<span class=\"token punctuation\">.</span>\n\n<span class=\"token class-name\">Therefore</span><span class=\"token punctuation\">,</span> as much as it is a good thing <span class=\"token keyword\">to</span> allow users <span class=\"token keyword\">to</span> request <span class=\"token keyword\">for</span> whatever they need<span class=\"token punctuation\">,</span> at certain levels of complexity<span class=\"token punctuation\">,</span> requests like <span class=\"token keyword\">this</span> can slow down performs and immensely affect the efficiency of <span class=\"token class-name\">GraphQL</span> applications<span class=\"token punctuation\">.</span>\n\n<span class=\"token class-name\">To</span> avoid the mentioned problem<span class=\"token punctuation\">,</span> we can configue the <span class=\"token class-name\">Maximum</span> <span class=\"token class-name\">Query</span> <span class=\"token class-name\">Depth</span> using which we could prevent the clients from abusing query depth like <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span> <span class=\"token class-name\">Do</span> read the amazing article <span class=\"token keyword\">to</span> get <span class=\"token keyword\">to</span> know about the few strategies <span class=\"token keyword\">to</span> mitigate these types of risks<span class=\"token punctuation\">.</span>\n\n##<span class=\"token class-name\">Duplication</span> of <span class=\"token class-name\">Schemas</span>\n\n<span class=\"token class-name\">When</span> building <span class=\"token keyword\">with</span> <span class=\"token class-name\">GraphQL</span> on the backend<span class=\"token punctuation\">,</span> you would have some duplication and code repetition especially when it comes <span class=\"token keyword\">to</span> schemas<span class=\"token punctuation\">.</span> <span class=\"token class-name\">First</span><span class=\"token punctuation\">,</span> you need a schema <span class=\"token keyword\">for</span> your <span class=\"token function\">database</span><span class=\"token punctuation\">(</span>data models<span class=\"token punctuation\">)</span> and another <span class=\"token keyword\">for</span> your <span class=\"token class-name\">GraphQL</span> endpoint<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span> involves similar but<span class=\"token punctuation\">,</span> not quite identical code<span class=\"token punctuation\">,</span> especially when it comes <span class=\"token keyword\">to</span> schemas<span class=\"token punctuation\">.</span>\n\n<span class=\"token class-name\">It</span> is really difficult that you have <span class=\"token keyword\">to</span> write very similar code <span class=\"token keyword\">for</span> your schemas and data models<span class=\"token punctuation\">,</span> but it's even more frustrating that you also have <span class=\"token keyword\">to</span> continually keep them in sync<span class=\"token punctuation\">.</span>\n\n<span class=\"token class-name\">Apparently</span><span class=\"token punctuation\">,</span> efforts have been made in the <span class=\"token class-name\">GraphQL</span> community <span class=\"token keyword\">to</span> fix it<span class=\"token punctuation\">.</span> <span class=\"token class-name\">PostGraphile</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Prisma</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Hasura</span> etc<span class=\"token punctuation\">.</span> these tools generates a <span class=\"token class-name\">GraphQL</span> schema from your database schema<span class=\"token punctuation\">.</span>\n\n##<span class=\"token class-name\">Conclusion</span>\n\n<span class=\"token class-name\">The</span> conclusion <span class=\"token class-name\">I</span> arrived at when writing my <span class=\"token class-name\">GraphQL</span> server was that <span class=\"token class-name\">GraphQL</span> is not the elixir <span class=\"token class-name\">I</span> thought it was<span class=\"token punctuation\">.</span> <span class=\"token class-name\">Though</span><span class=\"token punctuation\">,</span> all the features it advertised sounded incredible<span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">Learning</span> the schema language of <span class=\"token class-name\">GraphQL</span> was not difficult<span class=\"token punctuation\">.</span> <span class=\"token class-name\">Once</span> you learn about schemas<span class=\"token punctuation\">,</span> resolvers<span class=\"token punctuation\">,</span> object types<span class=\"token punctuation\">,</span> query and mutation you are ready <span class=\"token keyword\">to</span> write your <span class=\"token class-name\">GraphQL</span> server<span class=\"token punctuation\">.</span>\n\n<span class=\"token class-name\">The</span> only major problem <span class=\"token class-name\">I</span> see <span class=\"token keyword\">with</span> <span class=\"token class-name\">GraphQL</span> is <span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">DB</span> hits<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span> which <span class=\"token class-name\">Dataloaders</span> was introduced <span class=\"token keyword\">to</span> resque but<span class=\"token punctuation\">,</span> coming from the REST background sometimes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">I</span> get confused <span class=\"token keyword\">while</span> writing the <span class=\"token class-name\">GraphQL</span> schemas say <span class=\"token keyword\">for</span> example\n\n<span class=\"token class-name\">So</span><span class=\"token punctuation\">,</span> here either <span class=\"token class-name\">I</span> can define options as a field resolver and use <span class=\"token class-name\">Dataloader</span> or get the entire data in a single query using joins which more sounds like a REST<span class=\"token punctuation\">.</span> <span class=\"token class-name\">So</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">In</span> order <span class=\"token keyword\">to</span> decide <span class=\"token class-name\">I</span> think of the clients who are going <span class=\"token keyword\">to</span> use these <span class=\"token class-name\">APIs</span><span class=\"token punctuation\">.</span> <span class=\"token class-name\">I</span> would not use <span class=\"token class-name\">GraphQL</span> in a simple application <span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span> example<span class=\"token punctuation\">,</span> one that <span class=\"token keyword\">uses</span> a few fields in the same way<span class=\"token punctuation\">,</span> every time<span class=\"token punctuation\">)</span> as it would add more complexity<span class=\"token punctuation\">.</span> but <span class=\"token keyword\">if</span> <span class=\"token class-name\">I</span> would have various clients<span class=\"token punctuation\">,</span> <span class=\"token keyword\">with</span> different data requirements<span class=\"token punctuation\">,</span> <span class=\"token class-name\">I</span> would use <span class=\"token class-name\">GraphQL</span> without a doubt<span class=\"token punctuation\">.</span></code></pre></div>"}