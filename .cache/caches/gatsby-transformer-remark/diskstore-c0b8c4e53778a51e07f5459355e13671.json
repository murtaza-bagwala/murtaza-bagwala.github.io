{"expireTime":9007200911358258000,"key":"transformer-remark-markdown-ast-170e93710832cb4242f5ef1d3e1182fc-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"In this two-part series, we aim to demystify the concepts behind Ruby’s memory management \nand take a deeper look at how \n","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":4,"column":1,"offset":123},"indent":[1,1]}},{"type":"link","title":null,"url":"https://bugs.ruby-lang.org/issues/18045","children":[{"type":"text","value":"Variable Width Allocation","position":{"start":{"line":4,"column":2,"offset":124},"end":{"line":4,"column":27,"offset":149},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":123},"end":{"line":4,"column":69,"offset":191},"indent":[]},"data":{"hProperties":{"target":"_blank","rel":"nofollow noopener noreferrer"}}},{"type":"text","value":" \ncan improve Ruby’s memory performance.","position":{"start":{"line":4,"column":69,"offset":191},"end":{"line":5,"column":39,"offset":231},"indent":[1]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":5,"column":39,"offset":231},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#rvalue","title":null,"children":[],"data":{"hProperties":{"aria-label":"rvalue permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"RVALUE","position":{"start":{"line":7,"column":5,"offset":237},"end":{"line":7,"column":11,"offset":243},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":233},"end":{"line":7,"column":11,"offset":243},"indent":[]},"data":{"id":"rvalue","htmlAttributes":{"id":"rvalue"},"hProperties":{"id":"rvalue","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"For Dynamic Memory allocation, \nthe Ruby program uses Heap memory \nand the basic unit of the heap is a slot. Here, each slot occupies a value which is known as ","position":{"start":{"line":9,"column":1,"offset":245},"end":{"line":11,"column":94,"offset":405},"indent":[1,1]}},{"type":"strong","children":[{"type":"text","value":"RVALUE","position":{"start":{"line":11,"column":96,"offset":407},"end":{"line":11,"column":102,"offset":413},"indent":[]}}],"position":{"start":{"line":11,"column":94,"offset":405},"end":{"line":11,"column":104,"offset":415},"indent":[]}},{"type":"text","value":". \nThis ","position":{"start":{"line":11,"column":104,"offset":415},"end":{"line":12,"column":6,"offset":423},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"RVALUE","position":{"start":{"line":12,"column":8,"offset":425},"end":{"line":12,"column":14,"offset":431},"indent":[]}}],"position":{"start":{"line":12,"column":6,"offset":423},"end":{"line":12,"column":16,"offset":433},"indent":[]}},{"type":"text","value":" comprises 40 bytes and a container for objects of all types (Array, String, Class). \nOut of these 40 bytes, the initial 8 bytes are reserved for a flag, followed by 8 bytes of Klass pointer. \nThe remaining 24 bytes are reserved for object-specific fields.","position":{"start":{"line":12,"column":16,"offset":433},"end":{"line":14,"column":64,"offset":689},"indent":[1,1]}},{"type":"break","position":{"start":{"line":14,"column":64,"offset":689},"end":{"line":15,"column":1,"offset":692},"indent":[1]}},{"type":"text","value":"For example, for a Class object, it stores the pointer to an extension object \nand for a String, it stores its content. ","position":{"start":{"line":15,"column":1,"offset":692},"end":{"line":16,"column":42,"offset":812},"indent":[1]}}],"position":{"start":{"line":9,"column":1,"offset":245},"end":{"line":16,"column":42,"offset":812},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/r-value.jpg","alt":"alt","position":{"start":{"line":18,"column":1,"offset":814},"end":{"line":18,"column":33,"offset":846},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":814},"end":{"line":18,"column":33,"offset":846},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#heap-pages-","title":null,"children":[],"data":{"hProperties":{"aria-label":"heap pages  permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Heap Pages:-","position":{"start":{"line":20,"column":5,"offset":852},"end":{"line":20,"column":17,"offset":864},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":848},"end":{"line":20,"column":17,"offset":864},"indent":[]},"data":{"id":"heap-pages-","htmlAttributes":{"id":"heap-pages-"},"hProperties":{"id":"heap-pages-","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"These 40-byte slots are organized into Heap pages. \nHeap pages are containers of 16kb memory region, \naccordingly, each Heap page has 408-409 slots \nand all the slots on the same heap page are contiguous, with no gaps in between.","position":{"start":{"line":22,"column":1,"offset":866},"end":{"line":25,"column":81,"offset":1095},"indent":[1,1,1]}}],"position":{"start":{"line":22,"column":1,"offset":866},"end":{"line":25,"column":81,"offset":1095},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/heap-page.png","alt":"alt","position":{"start":{"line":27,"column":1,"offset":1097},"end":{"line":27,"column":35,"offset":1131},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1097},"end":{"line":27,"column":35,"offset":1131},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#freelist-","title":null,"children":[],"data":{"hProperties":{"aria-label":"freelist  permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Freelist:-","position":{"start":{"line":29,"column":5,"offset":1137},"end":{"line":29,"column":15,"offset":1147},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1133},"end":{"line":29,"column":15,"offset":1147},"indent":[]},"data":{"id":"freelist-","htmlAttributes":{"id":"freelist-"},"hProperties":{"id":"freelist-","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"Initially, when the Heap page is created, all the slots are filled with the special RVALUE type ","position":{"start":{"line":31,"column":1,"offset":1149},"end":{"line":31,"column":97,"offset":1245},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"T_NONE","position":{"start":{"line":31,"column":99,"offset":1247},"end":{"line":31,"column":105,"offset":1253},"indent":[]}}],"position":{"start":{"line":31,"column":97,"offset":1245},"end":{"line":31,"column":107,"offset":1255},"indent":[]}},{"type":"text","value":".\nThis represents an empty slot \nand contains only a flag, \nand a Klass pointer value known as ","position":{"start":{"line":31,"column":107,"offset":1255},"end":{"line":34,"column":36,"offset":1350},"indent":[1,1,1]}},{"type":"strong","children":[{"type":"text","value":"next","position":{"start":{"line":34,"column":38,"offset":1352},"end":{"line":34,"column":42,"offset":1356},"indent":[]}}],"position":{"start":{"line":34,"column":36,"offset":1350},"end":{"line":34,"column":44,"offset":1358},"indent":[]}},{"type":"text","value":". This can be further pointed to another RVALUE.","position":{"start":{"line":34,"column":44,"offset":1358},"end":{"line":34,"column":92,"offset":1406},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1149},"end":{"line":34,"column":92,"offset":1406},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/freelist1.png","alt":"alt","position":{"start":{"line":36,"column":1,"offset":1408},"end":{"line":36,"column":35,"offset":1442},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1408},"end":{"line":36,"column":35,"offset":1442},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Also, when the Heap page is initialized, \nRuby sets a pointer called ","position":{"start":{"line":38,"column":1,"offset":1444},"end":{"line":39,"column":28,"offset":1513},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"freelist","position":{"start":{"line":39,"column":30,"offset":1515},"end":{"line":39,"column":38,"offset":1523},"indent":[]}}],"position":{"start":{"line":39,"column":28,"offset":1513},"end":{"line":39,"column":40,"offset":1525},"indent":[]}},{"type":"text","value":" pointer to the address of the first slot, \nand then it starts visiting each of these slots. \nAs it gradually gets to each slot, \nit sets the freelist pointer to the address of the current slot\nand the current slot’s ","position":{"start":{"line":39,"column":40,"offset":1525},"end":{"line":43,"column":24,"offset":1742},"indent":[1,1,1,1]}},{"type":"strong","children":[{"type":"text","value":"next","position":{"start":{"line":43,"column":26,"offset":1744},"end":{"line":43,"column":30,"offset":1748},"indent":[]}}],"position":{"start":{"line":43,"column":24,"offset":1742},"end":{"line":43,"column":32,"offset":1750},"indent":[]}},{"type":"text","value":" pointer to the address of the previous slot.","position":{"start":{"line":43,"column":32,"offset":1750},"end":{"line":43,"column":77,"offset":1795},"indent":[]}},{"type":"break","position":{"start":{"line":43,"column":77,"offset":1795},"end":{"line":44,"column":1,"offset":1798},"indent":[1]}},{"type":"text","value":"It derives the address of the previous slot from its last visit by creating a LinkedList of the empty slots called ","position":{"start":{"line":44,"column":1,"offset":1798},"end":{"line":44,"column":116,"offset":1913},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"FreeList","position":{"start":{"line":44,"column":118,"offset":1915},"end":{"line":44,"column":126,"offset":1923},"indent":[]}}],"position":{"start":{"line":44,"column":116,"offset":1913},"end":{"line":44,"column":128,"offset":1925},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":44,"column":128,"offset":1925},"end":{"line":44,"column":129,"offset":1926},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1444},"end":{"line":44,"column":129,"offset":1926},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/freelist.gif","alt":"alt","position":{"start":{"line":46,"column":1,"offset":1928},"end":{"line":46,"column":34,"offset":1961},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1928},"end":{"line":46,"column":34,"offset":1961},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#allocating-an-object","title":null,"children":[],"data":{"hProperties":{"aria-label":"allocating an object permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Allocating an object","position":{"start":{"line":48,"column":5,"offset":1967},"end":{"line":48,"column":25,"offset":1987},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1963},"end":{"line":48,"column":25,"offset":1987},"indent":[]},"data":{"id":"allocating-an-object","htmlAttributes":{"id":"allocating-an-object"},"hProperties":{"id":"allocating-an-object","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"So, when it needs to allocate an object, Ruby asks for an address of an empty slot from a Heap page. \nNot to mention, the Heap page always returns a freelist pointer that has an address to the empty slot, \nupdates a freelist pointer with the address of the next empty slot \nand also unlinks the current empty slot from the freelist.\nThis allows Ruby to put data into it. \nThe use of freelist keeps the object allocation operation constant in time, \nso each time Ruby asks for an empty slot, \nthe Heap page just checks a value of the freelist pointer \nand returns the address to Ruby.  ","position":{"start":{"line":50,"column":1,"offset":1989},"end":{"line":58,"column":35,"offset":2574},"indent":[1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":50,"column":1,"offset":1989},"end":{"line":58,"column":35,"offset":2574},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/alloc1.png","alt":"alt","position":{"start":{"line":60,"column":1,"offset":2576},"end":{"line":60,"column":32,"offset":2607},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2576},"end":{"line":60,"column":32,"offset":2607},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Allocating an object of type Rclass","position":{"start":{"line":62,"column":1,"offset":2609},"end":{"line":62,"column":36,"offset":2644},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2609},"end":{"line":62,"column":36,"offset":2644},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/alloc2.png","alt":"alt","position":{"start":{"line":64,"column":1,"offset":2646},"end":{"line":64,"column":32,"offset":2677},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2646},"end":{"line":64,"column":32,"offset":2677},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Allocating an object of type RString","position":{"start":{"line":66,"column":1,"offset":2679},"end":{"line":66,"column":37,"offset":2715},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2679},"end":{"line":66,"column":37,"offset":2715},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/alloc3.png","alt":"alt","position":{"start":{"line":68,"column":1,"offset":2717},"end":{"line":68,"column":32,"offset":2748},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2717},"end":{"line":68,"column":32,"offset":2748},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Allocating an object of type RArray","position":{"start":{"line":70,"column":1,"offset":2750},"end":{"line":70,"column":36,"offset":2785},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":2750},"end":{"line":70,"column":36,"offset":2785},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/alloc4.png","alt":"alt","position":{"start":{"line":72,"column":1,"offset":2787},"end":{"line":72,"column":32,"offset":2818},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":2787},"end":{"line":72,"column":32,"offset":2818},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"And once all the slots are filled in, \n","position":{"start":{"line":74,"column":1,"offset":2820},"end":{"line":75,"column":1,"offset":2859},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"Garbage Collector","position":{"start":{"line":75,"column":3,"offset":2861},"end":{"line":75,"column":20,"offset":2878},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":2859},"end":{"line":75,"column":22,"offset":2880},"indent":[]}},{"type":"text","value":" comes into action to reclaim spaces from the dead objects.","position":{"start":{"line":75,"column":22,"offset":2880},"end":{"line":75,"column":81,"offset":2939},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":2820},"end":{"line":75,"column":81,"offset":2939},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#garbage-collection","title":null,"children":[],"data":{"hProperties":{"aria-label":"garbage collection permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Garbage collection","position":{"start":{"line":77,"column":5,"offset":2945},"end":{"line":77,"column":23,"offset":2963},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":2941},"end":{"line":77,"column":23,"offset":2963},"indent":[]},"data":{"id":"garbage-collection","htmlAttributes":{"id":"garbage-collection"},"hProperties":{"id":"garbage-collection","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"Ruby uses the ","position":{"start":{"line":79,"column":1,"offset":2965},"end":{"line":79,"column":15,"offset":2979},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Mark-Sweep-Compact","position":{"start":{"line":79,"column":17,"offset":2981},"end":{"line":79,"column":35,"offset":2999},"indent":[]}}],"position":{"start":{"line":79,"column":15,"offset":2979},"end":{"line":79,"column":37,"offset":3001},"indent":[]}},{"type":"text","value":" garbage collection algorithm, \nalso when GC is active, the ruby code does not get executed. \nLet us look into each of the GC phases:-","position":{"start":{"line":79,"column":37,"offset":3001},"end":{"line":81,"column":41,"offset":3135},"indent":[1,1]}}],"position":{"start":{"line":79,"column":1,"offset":2965},"end":{"line":81,"column":41,"offset":3135},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Marking","position":{"start":{"line":83,"column":3,"offset":3139},"end":{"line":83,"column":10,"offset":3146},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":3137},"end":{"line":83,"column":12,"offset":3148},"indent":[]}},{"type":"text","value":":- It is the phase where we determine which objects are alive \nand which can be freed. \nFirst, we mark the root-like global variables, \nclasses, etc. along with their children \nuntil the mark stack is empty.","position":{"start":{"line":83,"column":12,"offset":3148},"end":{"line":87,"column":31,"offset":3355},"indent":[1,1,1,1]}}],"position":{"start":{"line":83,"column":1,"offset":3137},"end":{"line":87,"column":31,"offset":3355},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let us consider that we have 2 Heap pages with 4 slots each from A to C and E to G. \nEmpty slots are free slots \nand black slots are marked slots. \nHere, the arrow shows the references, \nfor example, an arrow from A to G shows that object A \nhas an instance variable declared in G.","position":{"start":{"line":89,"column":1,"offset":3357},"end":{"line":94,"column":40,"offset":3638},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":89,"column":1,"offset":3357},"end":{"line":94,"column":40,"offset":3638},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/mark1.png","alt":"alt","position":{"start":{"line":96,"column":1,"offset":3640},"end":{"line":96,"column":31,"offset":3670},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":3640},"end":{"line":96,"column":31,"offset":3670},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let us start with the root elements we have - A \nand B \nand push them both on the Mark stack.\nNow, let’s pop one element from the stack, mark it \nand push its children on the stack. \nHere pop A, \nand push A’s child G to mark stack.\nNow, pop B, mark it \nand push its child E in the mark stack \nand repeat this until we have the entire Mark stack as empty. \nAnd, once it has marked all the objects along with their children, \nit moves to the sweep phase.","position":{"start":{"line":98,"column":1,"offset":3672},"end":{"line":109,"column":29,"offset":4124},"indent":[1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":98,"column":1,"offset":3672},"end":{"line":109,"column":29,"offset":4124},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/mark.gif","alt":"alt","position":{"start":{"line":111,"column":1,"offset":4126},"end":{"line":111,"column":30,"offset":4155},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":4126},"end":{"line":111,"column":30,"offset":4155},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Sweeping","position":{"start":{"line":113,"column":3,"offset":4159},"end":{"line":113,"column":11,"offset":4167},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":4157},"end":{"line":113,"column":13,"offset":4169},"indent":[]}},{"type":"text","value":":- It is the phase where all the unmarked objects can be reclaimed by the garbage collector. \nSo, after the marking step, this is how our heap pages look like:-","position":{"start":{"line":113,"column":13,"offset":4169},"end":{"line":114,"column":67,"offset":4329},"indent":[1]}}],"position":{"start":{"line":113,"column":1,"offset":4157},"end":{"line":114,"column":67,"offset":4329},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/sweep1.png","alt":"alt","position":{"start":{"line":116,"column":1,"offset":4331},"end":{"line":116,"column":32,"offset":4362},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":4331},"end":{"line":116,"column":32,"offset":4362},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now, GC scans all the heap pages, checks for unmarked objects, \nand frees the space. \nIn our case, we have C \nand F as unmarked, therefore, GC will reclaim these spaces.","position":{"start":{"line":118,"column":1,"offset":4364},"end":{"line":121,"column":60,"offset":4533},"indent":[1,1,1]}}],"position":{"start":{"line":118,"column":1,"offset":4364},"end":{"line":121,"column":60,"offset":4533},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/sweep2.png","alt":"alt","position":{"start":{"line":123,"column":1,"offset":4535},"end":{"line":123,"column":32,"offset":4566},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":4535},"end":{"line":123,"column":32,"offset":4566},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Compaction","position":{"start":{"line":125,"column":3,"offset":4570},"end":{"line":125,"column":13,"offset":4580},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":4568},"end":{"line":125,"column":15,"offset":4582},"indent":[]}},{"type":"text","value":":- Compaction moves objects within the heap page to the start of the heap page \nand it results in various benefits including reduced memory usage, faster garbage collection, \nand better write performance. \nAlso, this involves 2 steps:-","position":{"start":{"line":125,"column":15,"offset":4582},"end":{"line":128,"column":30,"offset":4817},"indent":[1,1,1]}}],"position":{"start":{"line":125,"column":1,"offset":4568},"end":{"line":128,"column":30,"offset":4817},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Compact step","position":{"start":{"line":130,"column":5,"offset":4823},"end":{"line":130,"column":17,"offset":4835},"indent":[]}}],"position":{"start":{"line":130,"column":3,"offset":4821},"end":{"line":130,"column":19,"offset":4837},"indent":[]}},{"type":"text","value":":- This uses two cursors, \n","position":{"start":{"line":130,"column":19,"offset":4837},"end":{"line":131,"column":1,"offset":4864},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"Free cursor","position":{"start":{"line":131,"column":3,"offset":4866},"end":{"line":131,"column":14,"offset":4877},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":4864},"end":{"line":131,"column":16,"offset":4879},"indent":[]}},{"type":"text","value":" which moves forward \nand ","position":{"start":{"line":131,"column":16,"offset":4879},"end":{"line":132,"column":5,"offset":4905},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"Compact cursor","position":{"start":{"line":132,"column":7,"offset":4907},"end":{"line":132,"column":21,"offset":4921},"indent":[]}}],"position":{"start":{"line":132,"column":5,"offset":4905},"end":{"line":132,"column":23,"offset":4923},"indent":[]}},{"type":"text","value":" which moves backward. \nThis is why it is also called ","position":{"start":{"line":132,"column":23,"offset":4923},"end":{"line":133,"column":31,"offset":4977},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"2 Fingers algorithm","position":{"start":{"line":133,"column":33,"offset":4979},"end":{"line":133,"column":52,"offset":4998},"indent":[]}}],"position":{"start":{"line":133,"column":31,"offset":4977},"end":{"line":133,"column":54,"offset":5000},"indent":[]}},{"type":"text","value":" \nand when these two cursors meet, this step is complete. ","position":{"start":{"line":133,"column":54,"offset":5000},"end":{"line":134,"column":57,"offset":5058},"indent":[1]}}],"position":{"start":{"line":130,"column":3,"offset":4821},"end":{"line":134,"column":57,"offset":5058},"indent":[1,1,1,1]}}],"position":{"start":{"line":130,"column":1,"offset":4819},"end":{"line":134,"column":57,"offset":5058},"indent":[1,1,1,1]}}],"position":{"start":{"line":130,"column":1,"offset":4819},"end":{"line":134,"column":57,"offset":5058},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let us understand this through an example. \nHere, the white arrow is the Free cursor \nand the black arrow is the Compact cursor. \nThe Free cursor begins from the start of the heap \nand moves to the first free slot. \nThen the Compact cursor starts from the end of the heap \nand moves to the first filled slot. \nIt will then move the object at the compact cursor to the free slot \nand leave a forwarding address at the original object to remember where this object was moved. \nNow, continue moving the Free cursor forward \nand the Compact cursor backward, repeat the above steps till these two cursors meet, \nmeaning that this step is complete. \nAfter this step, we can see all the initial free slots are filled.","position":{"start":{"line":136,"column":1,"offset":5060},"end":{"line":148,"column":67,"offset":5770},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":136,"column":1,"offset":5060},"end":{"line":148,"column":67,"offset":5770},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/compact.gif","alt":"alt","position":{"start":{"line":150,"column":1,"offset":5772},"end":{"line":150,"column":33,"offset":5804},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":5772},"end":{"line":150,"column":33,"offset":5804},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Update reference step","position":{"start":{"line":152,"column":5,"offset":5810},"end":{"line":152,"column":26,"offset":5831},"indent":[]}}],"position":{"start":{"line":152,"column":3,"offset":5808},"end":{"line":152,"column":28,"offset":5833},"indent":[]}},{"type":"text","value":":- In this step, \nwe update the pointers to objects which were moved in the compaction step. \nLet us continue with the previous example:-","position":{"start":{"line":152,"column":28,"offset":5833},"end":{"line":154,"column":44,"offset":5970},"indent":[1,1]}}],"position":{"start":{"line":152,"column":3,"offset":5808},"end":{"line":154,"column":44,"offset":5970},"indent":[1,1]}}],"position":{"start":{"line":152,"column":1,"offset":5806},"end":{"line":154,"column":44,"offset":5970},"indent":[1,1]}}],"position":{"start":{"line":152,"column":1,"offset":5806},"end":{"line":154,"column":44,"offset":5970},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/refer1.png","alt":"alt","position":{"start":{"line":156,"column":1,"offset":5972},"end":{"line":156,"column":32,"offset":6003},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":5972},"end":{"line":156,"column":32,"offset":6003},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We will now have just one cursor which will scan the objects linearly \nand check if any of the objects have the reference to a forwarding address, \nSo, in our case object, ","position":{"start":{"line":158,"column":1,"offset":6005},"end":{"line":160,"column":25,"offset":6177},"indent":[1,1]}},{"type":"html","value":"<code class=\"language-text\">A</code>","position":{"start":{"line":160,"column":25,"offset":6177},"end":{"line":160,"column":28,"offset":6180},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":160,"column":28,"offset":6180},"end":{"line":160,"column":33,"offset":6185},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">B</code>","position":{"start":{"line":160,"column":33,"offset":6185},"end":{"line":160,"column":36,"offset":6188},"indent":[]}},{"type":"text","value":" have the references to forwarding addresses \nthat says ","position":{"start":{"line":160,"column":36,"offset":6188},"end":{"line":161,"column":11,"offset":6244},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">Moved to Heap Page 1</code>","position":{"start":{"line":161,"column":11,"offset":6244},"end":{"line":161,"column":33,"offset":6266},"indent":[]}},{"type":"text","value":" \nand it will update the reference to the correct object which is ","position":{"start":{"line":161,"column":33,"offset":6266},"end":{"line":162,"column":65,"offset":6332},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">G</code>","position":{"start":{"line":162,"column":65,"offset":6332},"end":{"line":162,"column":68,"offset":6335},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":162,"column":68,"offset":6335},"end":{"line":162,"column":73,"offset":6340},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">E</code>","position":{"start":{"line":162,"column":73,"offset":6340},"end":{"line":162,"column":76,"offset":6343},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":162,"column":76,"offset":6343},"end":{"line":162,"column":77,"offset":6344},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":6005},"end":{"line":162,"column":77,"offset":6344},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/ruby-memory/refer2.png","alt":"alt","position":{"start":{"line":164,"column":1,"offset":6346},"end":{"line":164,"column":32,"offset":6377},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":6346},"end":{"line":164,"column":32,"offset":6377},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this blog, we looked at how Ruby manages memory \nand Garbage collection works, \nin the next blog, we will see how Variable Width Allocation works.","position":{"start":{"line":166,"column":1,"offset":6379},"end":{"line":168,"column":67,"offset":6528},"indent":[1,1]}}],"position":{"start":{"line":166,"column":1,"offset":6379},"end":{"line":168,"column":67,"offset":6528},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":171,"column":1,"offset":6531}}}}