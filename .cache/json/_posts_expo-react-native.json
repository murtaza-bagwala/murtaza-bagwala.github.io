{"data":{"markdownRemark":{"id":"125f0b2e-93c2-5803-8329-8842bcb4c438","html":"<p><a href=\"https://zuehlke.github.io/machines-code-people/articles/ci-cd-done-right.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CI/CD</a>\nis one of the most important practices of <a href=\"http://www.extremeprogramming.org/when.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">XP</a>.\nHaving set this up since the beginning can help in identify\nand fix issues earlier and faster time to market.\nHere, we at Saeloun make sure it gets set up since the start of the project.</p>\n<p>Let us start setting up a CI/CD for\n<a href=\"https://expo.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Expo</a> react-native application.\nFirst, we will set up the CI process\nso it gets run on each of the branches we create,\nand then we will set up the CD process specific to the <code class=\"language-text\">develop</code> or <code class=\"language-text\">main</code> branch\nbecause we need to create builds for the latest changes that get merged to <code class=\"language-text\">develop</code> or <code class=\"language-text\">main</code>.</p>\n<h4 id=\"continuos-integration\" style=\"position:relative;\"><a href=\"#continuos-integration\" aria-label=\"continuos integration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Continuos Integration</h4>\n<ul>\n<li>As we are using\n<a href=\"https://github.com/features/actions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github Actions</a>,\nwe need to create a <code class=\"language-text\">ci.yml</code> file inside the <code class=\"language-text\">.github/workflows</code> folder at the root of the project.</li>\n<li>Add the name of the workflow\nand the action on which we need to trigger the workflow.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name: CI\non: push</code></pre></div>\n<ul>\n<li>As Workflows are composed of Jobs\nwe need to add a Job with the name <code class=\"language-text\">lint-and-test</code>\nas we will be linting the code and running the test cases.\nAlso, we need to specify the type of machine\nthat will process a job in our workflow.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name: CI\non: push\n\njobs:\n  lint-and-test:\n    runs-on: ubuntu-latest</code></pre></div>\n<ul>\n<li>As Job is composed of a series of steps,\nwe need to add steps to cache and install the node modules,\nand finally run the lint and test cases.\nSo, this is what our final <code class=\"language-text\">ci.yml</code> file will look like.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name: CI\non: [push]\n\njobs:\n  lint-and-test:\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v2\n\n      - name: Find yarn cache location\n        id: yarn-cache\n        run: echo \"::set-output name=dir::$(yarn cache dir)\"\n\n      - name: JS package cache\n        uses: actions/cache@v1\n        with:\n          path: $(( steps.yarn-cache.outputs.dir ))\n          key: $(( runner.os ))-yarn-$(( hashFiles('**/yarn.lock') ))\n          restore-keys: |\n            $(( runner.os ))-yarn-\n\n      - name: Install Node Modules\n        run: yarn install\n\n      - name: Run Lint\n        run: yarn lint\n\n      - name: Run tests\n        run: yarn test  </code></pre></div>\n<p>Once we add this file and push the code, Github Actions will run the workflow and we can see the results on Github Actions Tab.</p>\n<h4 id=\"continuos-deployment\" style=\"position:relative;\"><a href=\"#continuos-deployment\" aria-label=\"continuos deployment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Continuos Deployment</h4>\n<p>To start with Continuos Deployment we need to first create an <code class=\"language-text\">EXPO_TOKEN</code>\nfrom <a href=\"https://expo.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">expo.dev</a>\nand add it to the GitHub project’s settings\nso that Expo allows GitHub Actions to create a build.</p>\n<ul>\n<li>Navigate to <a href=\"https://expo.dev/settings/access-tokens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://expo.dev/settings/access-tokens</a>.</li>\n<li>Click “Create” to create a new access token.</li>\n<li>Copy the token generated.</li>\n<li>Navigate to <a href=\"https://github.com/your-username/your-repo-name/settings/secrets/actions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/your-username/your-repo-name/settings/secrets/actions</a>, replacing “your-username” and “your-repo-name” with your project’s info.</li>\n<li>Click “New repository secret”</li>\n<li>Make the secret’s name “EXPO_TOKEN”, then paste the access token in as the value.</li>\n</ul>\n<p>Once this is done,\ncreate the <code class=\"language-text\">eas.json</code> file in your project root.\nThis file specifies different profiles\nwhich can be used to create builds for different environments\nfor example in our case\nwe created a <code class=\"language-text\">preview</code> profile for development builds.\nIt also specifies the type of packaging we need to use,\n<code class=\"language-text\">credentialsSource</code> to sign the build,\nand the <code class=\"language-text\">distribution</code> channel.  </p>\n<p>In our case, <code class=\"language-text\">credentialsSource</code> is set to remote\nwhich means Expo will automatically create the credentials to sign the app.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"cli\": {\n    \"version\": \">= 0.52.0\"\n  },\n  \"build\": {\n    \"preview\": {\n      \"distribution\": \"internal\",\n      \"android\": {\n        \"buildType\": \"apk\"\n      },\n      \"credentialsSource\": \"remote\"\n    },\n    \"production\": {}\n  },\n  \"submit\": {\n    \"production\": {}\n  }\n}</code></pre></div>\n<p>Now we are ready to create a GitHub Actions workflow to create a build.</p>\n<ul>\n<li>Create a <code class=\"language-text\">cd.yml</code> file inside the <code class=\"language-text\">.github/workflows</code> folder at the root of the project.</li>\n<li>Add the name of the workflow and action along with the branch name on which we need to trigger the workflow.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name: build\non: \n push:\n  branches:\n    - develop</code></pre></div>\n<ul>\n<li>Add the jobs <code class=\"language-text\">build</code> with <code class=\"language-text\">ubuntu-latest</code> as a runner machine.</li>\n<li>Add a step to fetch <code class=\"language-text\">EXPO_TOKEN</code> from the project’s settings.</li>\n<li>Add a step to set ENV.</li>\n<li>Add a step to install the expo.</li>\n<li>Add the steps to cache and install the node modules.</li>\n<li>Finally, add a step to create a build.</li>\n</ul>\n<p>Here is what our final <code class=\"language-text\">build.yml</code> looks like:- </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name: build\non: \n push:\n  branches:\n    - develop\n\njobs:\n  build:\n    name: EAS build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for EXPO_TOKEN\n        run: |\n          if [ -z \"$(( secrets.EXPO_TOKEN ))\" ]; then\n            echo \"You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets. Learn more: https://docs.expo.dev/eas-update/github-actions\"\n            exit 1\n          fi\n\n      - name: \"Set ENV\"\n        run: echo \"$(BASE_URL)\"     \n        env:\n          BASE_URL: https://exampleapp.com    \n\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Setup Node\n        uses: actions/setup-node@v2\n        with:\n          node-version: 16.x\n          cache: yarn\n\n      - name: Setup Expo\n        uses: expo/expo-github-action@v7\n        with:\n          expo-version: latest\n          eas-version: latest\n          token: $(( secrets.EXPO_TOKEN ))\n\n      - name: Find yarn cache\n        id: yarn-cache-path\n        run: echo \"::set-output name=dir::$(yarn cache dir)\"\n\n      - name: Restore cache\n        uses: actions/cache@v2\n        with:\n          path: \"$(( steps.yarn-cache-path.outputs.dir ))\"\n          key: \"$(( runner.os ))-yarn-$(( hashFiles('**/yarn.lock') ))\"\n          restore-keys: \"$(( runner.os ))-yarn-\"\n\n      - name: Install dependencies\n        run: yarn install --immutable\n\n      - name: Publish build\n        run: eas build --platform android --profile preview </code></pre></div>\n<p>As it can be seen from the <strong><em>Publish build</em></strong> command\nwe are creating an android build using the <code class=\"language-text\">preview</code> profile as mentioned above.</p>\n<p>Now, once we push this file to develop branch,\nGitHub Actions will run this workflow\nand trigger the build to be created on the Expo platform.\nOnce the build is created,\nwe can always download it from Expo builds dashboard.</p>\n<p><img src=\"/expo.png\" alt=\"alt\"></p>","fields":{"slug":"/posts/expo-react-native","tagSlugs":["/tag/react-native/","/tag/expo/","/tag/ci-cd/"]},"frontmatter":{"date":"2022-09-12T18:00:37.121Z","description":"In this blog, we will see how to set up a CI/CD workflow using Github Actions for the Expo React Native application.","tags":["react-native","expo","ci/cd"],"title":"How to set up a CI/CD workflow for Expo React Native application using Github Actions.","socialImage":null}}},"pageContext":{"slug":"/posts/expo-react-native"}}