{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/diving-into-rxjava/","result":{"data":{"markdownRemark":{"id":"4d5ad90c-a69c-55da-9b33-fa221b0c2c2e","html":"<p>I am back with the another post which aims to introduce a beginner reactive programmer to the complete power of the Java implementation of reactive programming.</p>\n<p>Basic knowledge of functional programming is needed like (lamdbdas, lazy evaluation) to follow the basics of RxJava, other than this only familiarity with the basics of Java is required.</p>\n<h2>Fundamental types</h2>\n<p>So, basically RX is composed of two fundamental types <code class=\"language-text\">Observable</code> and <code class=\"language-text\">Observer</code>, while several others expand the functionality around these core types</p>\n<p>As we saw in the <a href=\"https://www.linkedin.com/pulse/reactive-programming-step-ahead-functional-murtaza-bagwala/\">last post</a> Rx builds upon the Observer pattern. It is nothing new. Event handling already exists in Java (e.g. JavaFX's, Swing's EventHandler, ). Those are simpler approaches, which suffer in comparison to Rx:</p>\n<ul>\n<li>Events through event handlers are hard to compose.</li>\n<li>They cannot be queried over time</li>\n<li>They can lead to memory leaks</li>\n<li>These is no standard way of signaling completion.</li>\n<li>Require manual handling of concurrency and multithreading.</li>\n</ul>\n<h2>Observable</h2>\n<p>Observable is the fundamental element that we will see. All core operators of Rx extends this class. Observable implements very important interface known as ObservableSource which contains a method known as subscribe:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Subscription</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Subscriber</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> subscriber<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is the method that we use to receive the values emitted by the observable, so subscribers subscribe to observables using this method</p>\n<p>As we saw in the previous post, Rx handles error and recovery mechanism using 3 kinds of signals and actually these signals are pushed by Observables</p>\n<ol>\n<li>Values</li>\n<li>Completion, which indicates that no more values will be pushed.</li>\n<li>Errors, if something caused the sequence to fail. These events also imply termination.</li>\n</ol>\n<h2>Observer</h2>\n<p>This is also called as a <code class=\"language-text\">Subsrciber</code> who continuosly listens to the Observable For now, it is simpler to first understand the interface.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>Throwable</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Those three methods are the behaviour that is executed every time the observable pushes a value. The observer will have its <code class=\"language-text\">onNext</code> called zero or more times, optionally followed by an <code class=\"language-text\">onCompleted</code> or an <code class=\"language-text\">onError</code>. No calls happen after a call to onError or onCompleted</p>\n<h2>Subject</h2>\n<p>Subjects are an extension of the Observable that also implements the Observer interface. You may be thinking why we need Subjects if we have <code class=\"language-text\">Observables</code>, In order to understand the difference between a Subject and an Observable, you need to be aware of two distinct concepts</p>\n<ul>\n<li><code class=\"language-text\">A data producer</code></li>\n<li><code class=\"language-text\">A data consumer</code></li>\n</ul>\n<p>An <code class=\"language-text\">Observable</code>, by definition is a data producer. Albeit a special kind that can produce data over time.</p>\n<p>A <code class=\"language-text\">Subject</code> on the other hand can act as both â€“ a data producer and a data consumer.</p>\n<p>This implies two things.</p>\n<ol>\n<li>A subject can be subscribed to, just like an observable.</li>\n<li>A subject can subscribe to other observables.</li>\n</ol>\n<p>That being said, there is one critical difference between a subject and an observable.</p>\n<blockquote>\n<p>All subscribers to a subject share the same execution of the subject. i.e. when a subject\nproduces data, all of its subscribers will receive the same data. This behavior is different from observables, where each subscription causes an independent execution of the observable.</p>\n</blockquote>\n<p>Lets see an example to clarify this.</p>\n<p><strong>Publishing through Subject</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">PublishSubject</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> subject <span class=\"token operator\">=</span> <span class=\"token class-name\">PublishSubject</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Here data is broadcasted to each subscriber</span>\n<span class=\"token comment\">// A: 0.8495447073368834</span>\n<span class=\"token comment\">// B: 0.8495447073368834</span></code></pre></div>\n<p><strong>Publishing through Observable</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> observable <span class=\"token operator\">=</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>subscriber <span class=\"token operator\">-></span> subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobservable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobservable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Here observable function is re-executed for each subscriber</span>\n<span class=\"token comment\">// 0.8530384417006546</span>\n<span class=\"token comment\">// 0.30647595617691514</span></code></pre></div>\n<p>lets have a look at some couple of Subjects like <strong>PublishSubject</strong> and <strong>ReplaySubject</strong></p>\n<h2>Publish Subject</h2>\n<p><code class=\"language-text\">PublishSubject</code> is the most straight-forward kind of subject. When a value is pushed into a\n<code class=\"language-text\">PublishSubject</code>, the subject pushes it to every subscriber that is subscribed to it at that moment.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// creating a Subject this could be anything, any data stream</span>\n<span class=\"token comment\">// from any source</span>\n<span class=\"token class-name\">PublishSubject</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> subject <span class=\"token operator\">=</span> <span class=\"token class-name\">PublishSubject</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// we are manually making the subject to send the data,</span>\n<span class=\"token comment\">// but actually in create we can pass the lambda function</span>\n<span class=\"token comment\">// that automatically emits the data, we will see this in</span>\n<span class=\"token comment\">// detail in our later posts</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// subscribing to the subject on client side,</span>\n<span class=\"token comment\">// right now we are just printing the values received from the</span>\n<span class=\"token comment\">// observable but, here actually processing of data takes place</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First Subscriber: \"</span><span class=\"token operator\">+</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Second Subscriber: \"</span><span class=\"token operator\">+</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// output</span>\n<span class=\"token comment\">// First Subscriber: 2</span>\n<span class=\"token comment\">// First Subscriber: 3</span>\n<span class=\"token comment\">// Second Subscriber: 3</span>\n<span class=\"token comment\">// First Subscriber: 4</span>\n<span class=\"token comment\">// Second Subscriber: 4</span></code></pre></div>\n<p>As we can see in the example, <code class=\"language-text\">1</code> isn't printed because we weren't subscribed when it was pushed. After we subscribed, we began receiving the values that were pushed to the subject.</p>\n<p>This is the first time we see subscribe being used, so it is worth paying attention to how it was used. In this case, we used the overload which expects one Function for the case of onNext. That function takes an argument of type Integer and returns nothing. Functions without a return type are also called actions. We can provide that function in different ways:</p>\n<ol>\n<li>Implicitly create one using a lambda expression or</li>\n<li>Pass a reference to an existing method that fits the signature. In this case,\n<code class=\"language-text\">System.out::println</code> has an overload that accepts Object, so we passed a reference to it.\n<code class=\"language-text\">subscribe</code> will call <code class=\"language-text\">println</code> with the arriving values as the argument.</li>\n</ol>\n<p>Also, notice that when second subscriber joins in it doesn't get the old values <code class=\"language-text\">1</code> and <code class=\"language-text\">2</code>,\nIt only gets the data which is at the moment and after it subscribes in so, This type of <code class=\"language-text\">Subject</code> is called as <strong>Hot Subject</strong> which only sends the current data to the Subscribers.</p>\n<p>This type of Subjects can be used in scenarios where we want to process the current data like processing of the live video stream of a Football match. or processing the current stock price for say Wallmart</p>\n<h2>ReplaySubject</h2>\n<p><code class=\"language-text\">ReplaySubject</code> has the special feature of caching all the values pushed to it. When a new subscription is made, the event sequence is replayed from the start for the new subscriber. After catching up, every subscriber receives new events as they come.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ReplaySubject</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">ReplaySubject</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Early:\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Late: \"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// output</span>\n<span class=\"token comment\">// Early:0</span>\n<span class=\"token comment\">// Early:1</span>\n<span class=\"token comment\">// Late: 0</span>\n<span class=\"token comment\">// Late: 1</span>\n<span class=\"token comment\">// Early:2</span>\n<span class=\"token comment\">// Late: 2</span></code></pre></div>\n<p>All the values are received by the subscribers, even though one was late. Also notice that the late subscriber had everything replayed to it before proceeding to the next value. This type of Subject is called as <strong>Cold Subject</strong>.</p>\n<p>Here, you can also control the replaying parameter that is how many values you want to replay once, new subscriber joins in using ReplaySubject.createWithSize</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ReplaySubject</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">ReplaySubject</span><span class=\"token punctuation\">.</span><span class=\"token function\">createWithSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Late: \"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// output</span>\n<span class=\"token comment\">// Late: 1</span>\n<span class=\"token comment\">// Late: 2</span>\n<span class=\"token comment\">// Late: 3</span></code></pre></div>\n<p>Our late subscriber now missed the first value, which fell off the buffer of size 2.</p>\n<p>Other than these there are other subjects as well like <strong>BehaviorSubject</strong>,\n<strong>AsyncSubject</strong> you can dig in <a href=\"https://github.com/ReactiveX/RxJava/wiki/Subject\">here</a> more deeper</p>\n<p>In the next post we will be looking in to the <a href=\"https://murtaza-bagwala.github.io/Lifecycle-Management/\">LifeCycle management of Reactive Subscriptions</a> and how to handle errors emitted through Observables so, stay tuned</p>","fields":{"slug":"/posts/diving-into-rxjava","tagSlugs":["/tag/reactive-programming/"]},"frontmatter":{"date":"2018-06-04T22:40:32.169Z","description":"I am back with the another post which aims to introduce a beginner reactive programmer to the complete power of the Java implementation of reactive programming.\nBasic knowledge of functional programming is needed like (lamdbdas, lazy evaluation) to follow the basics of RxJava, other than this only familiarity with the basics of Java is required.. ","tags":["Reactive Programming"],"title":"Diving into RX Java","socialImage":"/media/image-0.jpg"}}},"pageContext":{"slug":"/posts/diving-into-rxjava"}},"staticQueryHashes":["2246977889","2727970573","984292147"],"slicesMap":{}}