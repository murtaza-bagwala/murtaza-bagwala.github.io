{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/rails-aliased-attr","result":{"data":{"markdownRemark":{"id":"867d7744-06ac-50c6-a275-b23a6614e59a","html":"<hr>\n<p>layout:     post\ntitle:      Rails allows using aliased attributes with insert<em>all and upsert</em>all\ndate:       2022-06-07\nsummary:    Rails is continuously adding convenience to make active record queries more flexible. Now, Rails has added support to use aliased attributes with insert/upsert_all.\ncategories: rails rails-7\nauthor: murtaza</p>\n<hr>\n<p>All of us would have used aliases with SQL queries as it makes the table\nand column names more readable.\nThe renaming is just a temporary change\nand the table name does not change in the original database.</p>\n<p>Rails now support aliased attributes with <code class=\"language-text\">insert_all</code>\nand <code class=\"language-text\">upsert_all</code>,\nwhich means we can add aliases in the Active Record model.</p>\n<p>For example,\nhere we are adding an alias <code class=\"language-text\">name</code> to\nthe original <code class=\"language-text\">title</code> attribute of <code class=\"language-text\">Product</code></p>\n<p>{% highlight ruby %}</p>\n<p>  class Product &#x3C; ApplicationRecord\nalias_attribute :name, :title\nend</p>\n<p>{% endhighlight %}</p>\n<h3 id=\"before\" style=\"position:relative;\"><a href=\"#before\" aria-label=\"before permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Before</h3>\n<p>{% highlight ruby %}</p>\n<p>=> Product.insert_all [{ name: “Detergent”, description: “A mixture of surfactants with cleansing properties” }], returning: :name</p>\n<p>=> /Users/murtazabagwala/.rvm/gems/ruby-3.0.2/gems/activerecord-7.0.3/lib/active<em>record/insert</em>all.rb:264:in `extract<em>types</em>from<em>columns</em>on’: unknown attribute ‘name’ for Product. (ActiveModel::UnknownAttributeError)</p>\n<p>{% endhighlight %}</p>\n<p>We can notice,\nit throws an error\nsaying unknown attribute <code class=\"language-text\">name</code>.</p>\n<h3 id=\"after\" style=\"position:relative;\"><a href=\"#after\" aria-label=\"after permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>After</h3>\n<p>{% highlight ruby %}</p>\n<p>=> Product.insert_all [{ name: “Detergent”, description: “A mixture of surfactants with cleansing properties” }], returning: :name</p>\n<p>Product Insert (2.2ms)  INSERT INTO “products” (“title”,“description”,“created<em>at”,“updated</em>at”) VALUES (‘Detergent’, ‘A mixture of surfactants with cleansing properties’, CURRENT<em>TIMESTAMP, CURRENT</em>TIMESTAMP) ON CONFLICT  DO NOTHING RETURNING “title” AS “name”</p>\n<p>=> #&#x3C;ActiveRecord::Result:0x00007f921ae855e0 @column<em>types={}, @columns=[“name”], @hash</em>rows=nil, @rows=[[“Detergent”]]> </p>\n<p>{% endhighlight %}</p>\n<p>Aliased attributes also work with <code class=\"language-text\">upsert_all</code></p>\n<p>{% highlight ruby %}</p>\n<p>=> Product.upsert_all [{ id: 1, name: “Soap”}]</p>\n<p>Product Upsert (4.7ms)  INSERT INTO “products” (“id”,“title”,“created<em>at”,“updated</em>at”) VALUES (1, ‘Soap’, CURRENT<em>TIMESTAMP, CURRENT</em>TIMESTAMP) ON CONFLICT (“id”) DO UPDATE SET updated<em>at=(CASE WHEN (“products”.“title” IS NOT DISTINCT FROM excluded.”title”) THEN “products”.updated</em>at ELSE CURRENT<em>TIMESTAMP END),“title”=excluded.”title” RETURNING “id”\n=> #&#x3C;ActiveRecord::Result:0x00007f92185c5650 @column</em>types={}, @columns=[“id”], @hash_rows=nil, @rows=[[1]]> </p>\n<p>{% endhighlight %}</p>\n<p>As it can be seen,\nit does not throw an error\nwhile using aliased attributes with <code class=\"language-text\">insert_all</code>\nand <code class=\"language-text\">upsert_all</code>.</p>\n<p><strong>Note: The enhancement is yet to be released in the official Rails version</strong></p>\n<p>Check out\n<a href=\"https://github.com/rails/rails/pull/45036\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the PR</a>\nfor more details.</p>","fields":{"slug":"/posts/rails-aliased-attr","tagSlugs":["/tag/kubernetes/","/tag/deployment/","/tag/devops/"]},"frontmatter":{"date":"2022-06-07T18:00:37.121Z","description":"As people and businesses increasingly depend on SaaS products, DevOps have started on creating reliable infrastructure. Reducing deployment downtime is at the top of their priority list. In this post, we will see how Kubernetes handles this gracefully.","tags":["Kubernetes","Deployment","Devops"],"title":"Rails allows using aliased attributes with insert_all and upsert_all","socialImage":null}}},"pageContext":{"slug":"/posts/rails-aliased-attr"}}}