{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/rails-contradictoy-relation/","result":{"data":{"markdownRemark":{"id":"7611efec-3635-5da4-9ff1-18087d4e7142","html":"<p>Previously, relation calculations such as <code class=\"language-text\">count</code> would make a query\neven when passed a contradiction,\n<a href=\"https://github.com/jhawthorn/rails/blob/main/activerecord/lib/active_record/relation/where_clause.rb#L99\">contradiction relation</a>\nmeans passing an empty array for eg:-</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  User.where(id: []).count</code></pre></div>\n<p>It does not make sense to call a database for such contradictory relations.</p>\n<h4>Before</h4>\n<p>So, before Rails 7 was introduced,\nthe database was called if the relation used for <code class=\"language-text\">count</code>, <code class=\"language-text\">sum</code>, <code class=\"language-text\">average</code>, <code class=\"language-text\">minimum</code>\nand <code class=\"language-text\">maximum</code> would be contradictory.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  => Product.where(title: []).count\n  Product Count (4.7ms)  SELECT COUNT(*) FROM \"products\" WHERE 1=0\n  => 0 \n\n\n  => Product.where(title: []).sum(:price)\n  Product Sum (17.5ms)  SELECT SUM(\"products\".\"price\") FROM \"products\" WHERE 1=0\n  => 0 \n\n\n  => Product.where(title: []).average(:price)\n  Product Average (3.5ms)  SELECT AVG(\"products\".\"price\") FROM \"products\" WHERE 1=0\n  => nil \n\n\n  => Product.where(title: []).minimum(:id)\n  Product Minimum (5.0ms)  SELECT MIN(\"products\".\"id\") FROM \"products\" WHERE 1=0\n  => nil \n\n\n  => Product.where(title: []).maximum(:id)\n  Product Minimum (5.0ms)  SELECT MAX(\"products\".\"id\") FROM \"products\" WHERE 1=0\n  => nil </code></pre></div>\n<p>As it can be seen,\nit would make a query to the database even when passed a contradiction.</p>\n<h4>After</h4>\n<p>Now after Rails 7, it avoids making a query to the database.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  => Product.where(title: []).count\n  => 0 \n\n\n  => Product.where(title: []).sum(:price)\n  => 0 \n\n\n  => Product.where(title: []).average(:price)\n  => nil \n\n\n  => Product.where(title: []).minimum(:id)\n  => nil \n\n\n  => Product.where(title: []).maximum(:id)\n  => nil  </code></pre></div>\n<p>Check out\n<a href=\"https://github.com/rails/rails/pull/45030\">the PR</a>\nfor more details.</p>","fields":{"slug":"/posts/rails-contradictoy-relation","tagSlugs":["/tag/rails/","/tag/rails-7/"]},"frontmatter":{"date":"2022-07-20T18:00:37.121Z","description":"Rails now avoids making a query to the database if the calculation contains a contradictory relation.","tags":["rails","rails-7"],"title":"Rails avoids queries when performing calculations on contradictory relation","socialImage":null}}},"pageContext":{"slug":"/posts/rails-contradictoy-relation"}},"staticQueryHashes":["2246977889","2727970573","984292147"],"slicesMap":{}}