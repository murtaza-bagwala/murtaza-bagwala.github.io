{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/rails-overuse-engine/","result":{"data":{"markdownRemark":{"id":"612bb37b-6148-5c84-b381-3bc42ccc3b2d","html":"<p>All of us would have used the well-known <a href=\"https://github.com/heartcombo/devise\">Devise</a>\ngem for authentication in Rails but we can also say it's an engine.\nSo, simply put a <a href=\"https://guides.rubyonrails.org/engines.html\">Rails engine</a>\nis the miniature edition of a Rails application.\nIt comes with its own app folder which includes controllers, models, etc\nThe only difference is, that an engine won't work on its own so,\nto make it work we need to inject it into the main Rails application.</p>\n<p>Rails engines were introduced to deal with bloated architectures by creating modular\nand reusable components but, everything is a curse if it is overused.</p>\n<p>Rails engines can be a powerful asset\nif implemented using a well-thought design otherwise it could lead to various problems.</p>\n<h4>Leaking of app information to engines</h4>\n<p>An application could leak information to engines\nand engines could use the information to do unexpected things.</p>\n<p>Let's say an engine expects an <code class=\"language-text\">author_name</code> from the main app\nusing which it tries to find\nand associate the user to the <code class=\"language-text\">Post</code> model\nand because the database is shared,\nthe engine is creating a <code class=\"language-text\">User</code> if not found,\nwithout the knowledge of the main app\nand this could lead to serious issues.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n  module Engine\n    class Post &lt; ActiveRecord::Base\n      attr_accessor :author_name\n      belongs_to :author, class_name: \"User\"\n\n      before_validation :set_author\n\n      private\n        def set_author\n            self.author = User.find_or_create_by(name: author_name)\n        end\n    end\n  end  </code></pre></div>\n<p>Here, we can also notice that the Engine has full control over the database\nand can perform any of the operations on the User.</p>\n<p>Also, for example, suppose our main app has a <code class=\"language-text\">posts_controller</code>\nand a route helper <code class=\"language-text\">posts_path</code>\nand if our engine tries to use a helper <code class=\"language-text\">posts_path</code>\nthen it can use it without an error\nso, this is how things can leak through boundaries between main app and engines.</p>\n<h4>Don’t use unless code shared across code bases</h4>\n<p>There is no point to use Engines unless we are planning to share them between the projects.\nEngines add little meaningful encapsulations to the architecture\nand are just a way to mix one Rails project into another.\nThis is useful if we are planning to release the next Devise as a gem.\nBut also, having a gem as a critical part of our project is also a royal pain,\nbecause it is by definition harder to change than the rest of the project\nso, we can always try with Ruby modules or libs first.</p>\n<h4>Harder to test engine code</h4>\n<p>Engines make TDD almost impossible.\nThe engine needs it's own full fake Rails app\nand database to live in to run any tests,\nwhich is an overhead to impose on any project's development team.</p>\n<p>To write engine tests that depend on main app models\nwe need to generate main app models inside the <code class=\"language-text\">test/dummy</code> directory defined in the engine\nand need to mount the engine on this dummy app as mentioned in\n<a href=\"https://guides.rubyonrails.org/engines.html#testing-an-engine\">docs</a>.</p>\n<h4>Less cohesion and coupled to app code</h4>\n<p>The idea of cohesion is to have applications that can evolve independently\nwhich means if we change one component then we don't need to change another\nbut it is not true in the case of engines,\nfor example, our blog engine finds a user by <code class=\"language-text\">name</code>\nand what if we rename a <code class=\"language-text\">name</code> attribute to <code class=\"language-text\">username</code>,\nwe will need to update the engine code to use this new attribute.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n  module Engine\n    class Post &lt; ActiveRecord::Base\n      attr_accessor :author_name\n      belongs_to :author, class_name: \"User\"\n\n      before_validation :set_author\n\n      private\n        def set_author\n            self.author = User.find_or_create_by(name: author_name)\n        end\n    end\n  end  </code></pre></div>\n<p>These issues occur because we generally don't have a\n<a href=\"https://martinfowler.com/bliki/BoundedContext.html\">Bounded Context</a>\ndefined between our application and engines.</p>\n<p>Also, the engine and app is using the same database.\nBy creating an interface separate from our data storage,\nwe smooth the road toward having a fully decoupled service with its own data store.\nFurthermore, we explicitly define the interactions with the data and behavior within the engine,\nrather than using the database as an interface.</p>\n<h4>Unnecessary code and dependencies</h4>\n<p>There is unnecessary and redundant code that gets checked into VCS\nbecause the engine has its own app directory along with the <code class=\"language-text\">.gemspec</code> file.\nSo with the main app, we also need to take care of the engines to clean up the unnecessary code\nand dependencies.</p>\n<h4>Multiple configs and gemfiles.</h4>\n<p>While using engines we need to deal with creating separate configurations for the main app\nand engines and that could result in some subtle serious issues.</p>\n<p>Engines define dependencies with a <code class=\"language-text\">.gemspec</code>, not a <code class=\"language-text\">Gemfile</code>,\nmeaning our gems need to be available on a gem server like RubyGems\nand can’t be loaded directly from GitHub.\nwe can always use a gem locally,\nbut that's a hassle.\nwe also need to be careful to use similar versions of dependencies between engines\nand the main app.\nFor example, if our main app is using a Devise 4.0\nand the engine is using Devise 3.0 with different configurations\nthen the engine will not work as expected\nbecause the engine devise will load the configuration from the main app initializer,\nnot from the engine's initializer.</p>","fields":{"slug":"/posts/rails-overuse-engine","tagSlugs":["/tag/rails/","/tag/rails-7/"]},"frontmatter":{"date":"2022-06-30T18:00:37.121Z","description":"In this post, we will see how the overuse of engines could lead to some serious issues.","tags":["rails","rails-7"],"title":"Overuse of Rails engines","socialImage":null}}},"pageContext":{"slug":"/posts/rails-overuse-engine"}},"staticQueryHashes":["2246977889","2727970573","984292147"],"slicesMap":{}}