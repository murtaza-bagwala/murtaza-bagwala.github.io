{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/kubernetes-deployment-rollback/","result":{"data":{"markdownRemark":{"id":"1951e8ee-7f02-58b3-9bb6-8e922848e08f","html":"<p>We often come across situations where app deployment to Production\nfails due to some breaking change.\nAt this point, we have two options - either revert\nor fix it.\nGenerally, we go for revert.\nIn order to revert,\nwe have to revert a code from production,\nwait for the CI to complete,\nand create the deployment again.\nAnd, this entire process usually takes us a while,\nleading to a disruption in app functioning,\nfollowed by\nsignificant monetary loss.</p>\n<p>To handle these risks associated with the deployments,\nwe need to have definite strategies to handle them, for example.</p>\n<ul>\n<li>We need to make sure the new version should be available to the users as early as possible.</li>\n<li>And, in case of failure, we should be able to roll back the application to the previous version in no time.</li>\n</ul>\n<p>There are mainly two strategies when it comes to deploying apps into production with zero downtime:-</p>\n<ul>\n<li><strong>Blue/Green Deployment</strong>:- It reduces downtime and risk by running two identical production environments called Blue and Green.</li>\n</ul>\n<p>So, instead of updating the current production (blue) environment with the new application version,\na new production (green) environment is created.\nWhen it’s time to release the new application,\nversion traffic is routed from the blue environment to the green environment.\nSo, if there are any problems, deployment can be easily rolled back.</p>\n<p><img src=\"/blue-green-deployment.png\" alt=\"alt\"></p>\n<ul>\n<li><strong>Rolling Updates</strong>:- This is a basic strategy that is about adding a new code to the existing deployment.</li>\n</ul>\n<p>The existing deployment becomes a heterogeneous pool of all the old versions\nand a new version,\nwith the end goal of slowly replacing all old instances with new instances.</p>\n<p>Kubernetes accommodates all the above-mentioned deployment strategies.\nWe will look into the <strong>Rolling Updates</strong>\nbecause it guarantees a safe rollout while keeping the ability to revert, if necessary.\n<strong>Rolling Updates</strong> also have first-class support in Kubernetes\nthat allow us to phase in a new version gradually.</p>\n<h4 id=\"rolling-updates\" style=\"position:relative;\"><a href=\"#rolling-updates\" aria-label=\"rolling updates permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rolling Updates</h4>\n<p>In Kubernetes, rolling updates are the default strategy to update the running version of our app.\nSo, Kubernetes runs a cluster of nodes,\nand each node consists of pods.\nThe rolling update cycles the previous Pod out\nand brings the newer Pod in incrementally.</p>\n<p>This is how rolling updates work.</p>\n<p><img src=\"/ru.gif\" alt=\"alt\"></p>\n<p>This is our Kubernetes deployment file which specifies replica as 3 for <code class=\"language-text\">demo-app</code>\nand the container image is pointing to AWS ECR.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: demo-app\n  labels:\n    app: demo-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: demo-app\n  template:\n    metadata:\n      labels:\n        app: demo-app\n    spec:\n      containers:\n        - name: image\n          image: 73570586743739.dkr.ecr.us-west-2.amazonaws.com/demo-app:v1.0\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 3001\n</code></pre></div>\n<p>Now when we run</p>\n<p><code class=\"language-text\">kubectl create -f demo-app.yml</code></p>\n<p>This will create the deployment with 3 pods running\nand we can see the status as running.</p>\n<p><code class=\"language-text\">kubectl get pods</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n   NAME                                READY     STATUS    RESTARTS   AGE\n  demo-app-1564180363-khku8            1/1       Running   0          14s\n  demo-app-1564180363-nacti            1/1       Running   0          14s\n  demo-app-1564180363-z9gth            1/1       Running   0          14s</code></pre></div>\n<p>Now, if we need to update the deployment\nor need to push the new version out,\nassuming CI has already pushed the new image to ECR,\nwe can just copy\nand update the image URL.</p>\n<p><code class=\"language-text\">kubectl set image deployment.apps/demo-app image=73570586743739.dkr.ecr.us-west-2.amazonaws.com/demo-app:v2.0</code></p>\n<p>The output is similar to:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n  >> deployment.apps/demo-app image updated\n</code></pre></div>\n<p>We can also add the description to the update,\nso we would know what has changed.</p>\n<p><code class=\"language-text\">kubectl annotate deployment.apps/demo-app kubernetes.io/change-cause=\"demo version changed from 1.0 to 2.0\"</code></p>\n<p>We can always check the status of the rolling update.</p>\n<p><code class=\"language-text\">kubectl rollout status deployment.apps/demo-app</code></p>\n<p>The output is similar to:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n  >> Waiting for rollout to finish: 2 out of 3 new replicas have been updated...\n  >> deployment \"demo-app\" successfully rolled out\n</code></pre></div>\n<p>We can see here that 2 out of 3 new pods are created\nand the old 2 pods are decommissioned.\nAnd, once all the pods are replaced, it shows a success message.</p>\n<p>And finally, running <code class=\"language-text\">get pods</code> should now show only the new Pods:</p>\n<p><code class=\"language-text\">kubectl get pods</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n   NAME                                READY     STATUS    RESTARTS   AGE\n  demo-app-1564180365-khku8            1/1       Running   0          14s\n  demo-app-1564180365-nacti            1/1       Running   0          14s\n  demo-app-1564180365-z9gth            1/1       Running   0          14s</code></pre></div>\n<p>A rolling update offers a way to gradually deploy the new version of our application\nacross the cluster.\nIt replaces the pods during several phases.\nFor example, we may replace 25% of the pods during the first phase,\nthen another 25% during the next, and so on, until all are upgraded.\nSince the pods are not replaced all at once,\nthis means that both versions will be live,\nat least for a short time, during the rollout.</p>\n<p>So, we can achieve zero-downtime deployment using Kubernetes\nand we can deploy as many times as we want\nand our users will not be able to notice the difference.</p>\n<p>However, even if we use <strong>Rolling updates</strong>,\nthere is still a risk that our application will not work the way we expect it at the end of the deployment\nand in such a case, we need a rollback.</p>\n<h4 id=\"rolling-back-a-deployment\" style=\"position:relative;\"><a href=\"#rolling-back-a-deployment\" aria-label=\"rolling back a deployment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rolling back a deployment</h4>\n<p>Sometimes,\ndue to a breaking change, we may want to rollback a Deployment\nand Kubernetes By default maintain Deployment’s rollout history\nso that we can rollback anytime we want.</p>\n<p>Suppose, we pushed a breaking change to production\nand tried deploying it</p>\n<p><code class=\"language-text\">kubectl set image deployment.apps/demo-app image=73570586743739.dkr.ecr.us-west-2.amazonaws.com/demo-app:v3.0</code>\n<code class=\"language-text\">kubectl annotate deployment.apps/demo-app kubernetes.io/change-cause=\"demo version changed from 2.0 to 3.0\"</code></p>\n<p>We can verify the rollout status:</p>\n<p><code class=\"language-text\">kubectl rollout status deployment.apps/demo-app</code></p>\n<p>The output is similar to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\nWaiting for rollout to finish: 1 out of 3 new replicas has been updated...</code></pre></div>\n<p>Looking at the Pods created, we can see that all the Pods are stuck.</p>\n<p><code class=\"language-text\">kubectl get pods</code>\nThe output is similar to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n  NAME                                READY     STATUS             RESTARTS   AGE\n  demo-app-1564180366-70iae           0/1       Running            0          3s\n  demo-app-1564180366-jbqqo           0/1       Running            0          3s\n  demo-app-1564180366-hysrc           0/1       Running            0          3s</code></pre></div>\n<p>As we can see, it says 0 out of 1 ready.</p>\n<p>And in this case, we need to rollback the deployment to a stable version.\nTo rollback, we need to check the rollout history.</p>\n<p><code class=\"language-text\">kubectl rollout history deployment.apps/demo-app</code></p>\n<p>The output is similar to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n  deployments \"demo-app\"\n\n  REVISION    CHANGE-CAUSE\n  1           \"from file demo-app.yml\"\n  2           \"demo version changed from 1.0 to 2.0\"\n  3           \"demo version changed from 2.0 to 3.0\"</code></pre></div>\n<p>It can be seen, that it shows revisions with change cause\nwhich we had added after updating the deployment,\nand in our case REVISION, 2 was stable.</p>\n<p>We can rollback to a specific version by specifying it with <code class=\"language-text\">--to-revision</code>:</p>\n<p><code class=\"language-text\">kubectl rollout undo deployment.apps/demo-app --to-revision=2</code></p>\n<p>The output is similar to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n  deployment.apps/demo-app rolled back\n</code></pre></div>\n<p>Check if the rollback was successful\nand the Deployment is running as expected, run:</p>\n<p><code class=\"language-text\">kubectl get deployment demo-app</code></p>\n<p>The output is similar to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n  NAME               READY   UP-TO-DATE   AVAILABLE   AGE\n  demo-app           3/3    3           3          12s\n</code></pre></div>\n<p>We can check the status of pods as well.</p>\n<p><code class=\"language-text\">kubectl get pods</code></p>\n<p>The output is similar to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n  NAME                                READY     STATUS             RESTARTS   AGE\n  demo-app-1564180365-khku8            1/1       Running           0          14s\n  demo-app-1564180365-nacti            1/1       Running           0          14s\n  demo-app-1564180365-z9gth            1/1       Running           0          14s</code></pre></div>","fields":{"slug":"/posts/kubernetes-deployment-rollback","tagSlugs":["/tag/kubernetes/","/tag/deployment/","/tag/devops/"]},"frontmatter":{"date":"2022-06-06T18:00:37.121Z","description":"As people and businesses increasingly depend on SaaS products, DevOps have started on creating reliable infrastructure. Reducing deployment downtime is at the top of their priority list. In this post, we will see how Kubernetes handles this gracefully.","tags":["Kubernetes","Deployment","Devops"],"title":"Know how to rollout and rollback deployments in Kubernetes","socialImage":null}}},"pageContext":{"slug":"/posts/kubernetes-deployment-rollback"}},"staticQueryHashes":["2246977889","2727970573","984292147"],"slicesMap":{}}