{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/rails-preserve-ttl/","result":{"data":{"markdownRemark":{"id":"894b6cd2-6213-5a78-886d-9d8e9394389e","html":"<p>Caching solutions like MemCache\nand Redis always preserve expiration,\nwhile altering a value to avoid any discrepancies caused by it.\nPreviously, while incrementing\nor decrementing an integer value in MemoryStore,\nRails used to reset the <code class=\"language-text\">expires_in</code> associated with the entry, for eg-</p>\n<h5>Before</h5>\n<p>Let's say, we are storing certain number of likes on a product\nas a <code class=\"language-text\">like_counter</code> in MemoryStore for 10 seconds.\nHere, if we increment\nor decrement the counter,\nit is used to reset the TTL.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\nirb(main):004:0> cache = ActiveSupport::Cache.lookup_store(:memory_store)\nirb(main):004:0> cache.write(\"like_counter\", 1, raw: true, expires_in: 10.seconds)\nirb(main):004:0> sleep(2.seconds)\nirb(main):004:0> cache.increment(\"like_counter\")\nirb(main):004:0> sleep(8.seconds)\nirb(main):004:0> cache.read(\"like_counter\")\nirb(main):004:0> 2\n</code></pre></div>\n<p>As we can see after 10 seconds, <code class=\"language-text\">like_counter</code> should have been deleted from the store, however,\nit still shows the incremented value because <code class=\"language-text\">cache.increment(\"like_counter\")</code> set the timer\nagain to 10 seconds.</p>\n<h4>After</h4>\n<p>Now, Rails preserves expires_in while incrementing\nor decrementing an integer value in MemoryStore.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\nirb(main):004:0> cache = ActiveSupport::Cache.lookup_store(:memory_store)\nirb(main):004:0> cache.write(\"like_counter\", 1, raw: true, expires_in: 10.seconds)\nirb(main):004:0> sleep(2.seconds)\nirb(main):004:0> cache.increment(\"like_counter\")\nirb(main):004:0> sleep(8.seconds)\nirb(main):004:0> cache.read(\"like_counter\")\nirb(main):004:0> nil\n</code></pre></div>\n<p>As it can be seen,\nthough we had incremented the counter,\nthe key got expired after 10 seconds\nand returned <code class=\"language-text\">nil</code></p>\n<p>Check out\n<a href=\"https://github.com/rails/rails/pull/46305\">the PR</a>\nfor more details.</p>","fields":{"slug":"/posts/rails-preserve-ttl","tagSlugs":["/tag/rails/","/tag/rails-7/"]},"frontmatter":{"date":"2023-01-07T18:00:37.121Z","description":"Rails now preserve expires_in while incrementing or decrementing an integer value in MemoryStore to be more consistent with MemCacheStore and RedisCacheStore.","tags":["rails","rails-7"],"title":"Rails preserves entry TTL when incrementing or decrementing an integer value.","socialImage":null}}},"pageContext":{"slug":"/posts/rails-preserve-ttl"}},"staticQueryHashes":["2246977889","2727970573","984292147"],"slicesMap":{}}