{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/general-blogs","result":{"data":{"markdownRemark":{"id":"41c5f12a-1b69-59e8-937e-674c2c02e30c","html":"<p>In one of the projects, we submitted an app to AppStore for review and it was rejected due to the below-mentioned reason.</p>\n<p><strong><em>We noticed that your app uses a third-party login service but does not offer Sign in with Apple.</em></strong></p>\n<p>Apple has updated their guidelines which says Apps that exclusively use a third-party or social login service (such as Facebook Login, Google Sign-In, Sign in with Twitter, Sign In with LinkedIn, log in with Amazon, or WeChat Login) to set up or authenticate the user’s primary account with the app must also offer Sign in with Apple as an equivalent option.</p>\n<p>Like other social login services, Apple too follows the same approach to authenticate the users like redirecting the users to the apple sign-in followed by API server validations.</p>\n<h2 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<p><img src=\"/apple-sign.jpg\" alt=\"alt\"></p>\n<p>After your app receives the user information, you can verify their associated identity token with the server to confirm that the token is not expired and ensure it has not been tampered with or replayed to your app.</p>\n<p>Start by securely transmitting the identity token, authorization code, and userId to your API server and perform the below-mentioned validations:-</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"authorizationCode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"c8adca8fb9eee455bbffae2314475dc15.0.rrruv.PFSuTcpvUNsetRanLgbp-w\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"identityToken\"</span><span class=\"token operator\">:</span> \"eyJraWQiOiJlWGF1bm1MIiwiYWxnIjoiUlMyNTYifQ<span class=\"token punctuation\">.</span>\n                   eyJpc3MiOiJodHRwczovL2FwcGxlaWQuYXBwbGUuY29tIiwiYXVkIjoiaG9zdC5leHAuRXhwb25lb\n                   nQiLCJleHAiOjE2MTM2NzE2MTEsImlhdCI6MTYxMzU4NTIxMSwic3ViIjoiMDAxMTQ1LjQ0MmMyNGU1NjQx\n                   NzQ4OTY4NmUxYWIyZjAwNTAzMjg4LjA2MjciLCJjX2hhc2giOiJWeU05eFg2SWNxTWVhdFZIbG90QTNRIiwi\n                   ZW1haWwiOiJ24fifWpheUB3ZWJvbmlzZWxhYi5jb20iLCJlbWFpbF92ZXJpZmllZCI6InRydWUiLCJhdXRoX\n                   <span class=\"token number\">3</span>RpbWUiOjE2MTM1ODUyMTEsIm5vbmNlX3N1cHBvcnRlZCI6dHJ1ZX0<span class=\"token punctuation\">.</span>ng7VcCSBdc1clxYzcnFBiqnuC1\n                   <span class=\"token number\">9</span>eHuOAUnEvRKRYNnYpqKXXwWxErteN6l1yPJOBqIz4eYWRer7ufkDhUpkPA45y6QUpGb25rFGREDidPefidcW5\n                   B23XNGwufCaCx2n49GUZFGsN4sJmrGx7aPhUHeFKmzT3K_gJUy3OOLnAeB3Enu<span class=\"token operator\">-</span>BKtvFQ0kAdl_hQQB9UpNbdq\n                   <span class=\"token constant\">D</span><span class=\"token operator\">-</span>qKEvfFS4oGemKCjW2SV0z4cdk_q4sUKIyr0i3zpz8DeErjbd2lsNY2<span class=\"token operator\">-</span><span class=\"token number\">6</span>RiG6CHCPEQonQA<span class=\"token operator\">-</span>AJcPQ2cpFf\n                   <span class=\"token number\">18</span>x9ZfSsYXI3zWRK_YTiz0QwAxKM7MhWdXVnAdi05u98D6qaAfN0FjVOYoREA\"<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"001122.442c24e56417489686e1a3742f00503288.0327\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"validate-authorization-code\" style=\"position:relative;\"><a href=\"#validate-authorization-code\" aria-label=\"validate authorization code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Validate authorization code</h2>\n<p>An authorization grant code that gets delivered to your API server, can be validated using this API</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">POST</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>appleid<span class=\"token punctuation\">.</span>apple<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>auth<span class=\"token operator\">/</span>token</code></pre></div>\n<p>When you send an authorization request to the validation server, include the following form data parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">client_id<span class=\"token operator\">:</span> com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span> <span class=\"token comment\">// AppId from Apple developers account</span>\n\n<span class=\"token comment\">// Need to generate it (Link in reference)</span>\n\nclient_secret<span class=\"token operator\">:</span> code<span class=\"token operator\">:</span> <span class=\"token string\">\"Authorization code received from App\"</span><span class=\"token punctuation\">;</span>\n\ngrant_type<span class=\"token operator\">:</span> <span class=\"token string\">\"authorization_code\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The validation server returns status as 200 for a successful validation request or 400 for failed request.</p>\n<h2 id=\"verify-an-identity\" style=\"position:relative;\"><a href=\"#verify-an-identity\" aria-label=\"verify an identity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verify an Identity</h2>\n<p>Once the authorization code is validated, we need to verify the identity token(JWT) as well. Now in order to do that we need Apple’s public key to verify the signature.</p>\n<p>To get the public key first we need to fetch JWKs (JSON Web Key). You can get the JWK keys from the following endpoint:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">GET</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>appleid<span class=\"token punctuation\">.</span>apple<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>auth<span class=\"token operator\">/</span>keys\n\nThe response would look like <span class=\"token keyword\">this</span><span class=\"token operator\">:</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"keys\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"kty\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"kid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"YuyXoY\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"use\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sig\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"alg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RS256\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"kty\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"kid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"86D88Kf\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"use\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sig\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"alg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RS256\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"kty\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"kid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eXaunmL\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"use\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sig\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"alg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RS256\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, it has 3 keys, then how to select the right key from the set. So, If you decode the Identity JWT token that you got (put it in <a href=\"https://jwt.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jwt.io/</a>), in the header you will see something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"kid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eXaunmL\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"alg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RS256\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>so, The “kid” (key ID) Header Parameter is a hint indicating which key we need to use to verify the signature of an identity token. In our case, we should be using the 3rd one.</p>\n<p>Also note that we do not need to decode the JWT and handpick the key from the keys set, instead there are already built libraries in all the languages which do all these things for you.</p>\n<p>for example, in NodeJS it would look like:-</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> jwtDecoder <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jsonwebtoken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> jwksClient <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jwks-rsa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> token <span class=\"token operator\">=</span> <span class=\"token string\">\"recieved identity token\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> userId <span class=\"token operator\">=</span> <span class=\"token string\">\"received user id\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">request</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">var</span> client <span class=\"token operator\">=</span> <span class=\"token function\">jwksClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\tjwksUri<span class=\"token operator\">:</span> <span class=\"token string\">\"https://appleid.apple.com/auth/keys\"</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">header<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tclient<span class=\"token punctuation\">.</span><span class=\"token function\">getSigningKey</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span>kid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">var</span> signingKey <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>publicKey <span class=\"token operator\">||</span> key<span class=\"token punctuation\">.</span>rsaPublicKey<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> signingKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tjwtDecoder<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> getKey<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> algorithms<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"RS256\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token parameter\">err<span class=\"token punctuation\">,</span>\n\t\tdecoded</span>\n\t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> isValid <span class=\"token operator\">=</span>\n\t\t\tdecoded<span class=\"token punctuation\">.</span>user <span class=\"token operator\">===</span> userId <span class=\"token operator\">&amp;&amp;</span>\n\t\t\tdecoded<span class=\"token punctuation\">.</span>iss <span class=\"token operator\">===</span> <span class=\"token string\">\"https://appleid.apple.com\"</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t\tdecoded<span class=\"token punctuation\">.</span>aud <span class=\"token operator\">===</span> <span class=\"token string\">\"com.test.app\"</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t\tdecoded<span class=\"token punctuation\">.</span>exp <span class=\"token operator\">>=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We just need to specify the apple JWKs endpoint and algorithm and the library will take care of all the stuff, it does the following things under the hood:-</p>\n<ul>\n<li>Find kid from the jwt header.</li>\n<li>Find the correct JWK from the Apple keys set.</li>\n<li>Fetch the public key based on the selected JWK.</li>\n<li>Verify and decode the JWT token.</li>\n</ul>\n<p>Now once we have verified and decoded the JWT token, we need to check</p>\n<ul>\n<li>iss field contains <a href=\"https://appleid.apple.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://appleid.apple.com</a></li>\n<li>aud field is the developer’s client_id</li>\n<li>The current time is earlier than the expired value of the token</li>\n</ul>\n<h2 id=\"the-issue-with-the-expo-apple-sign-in\" style=\"position:relative;\"><a href=\"#the-issue-with-the-expo-apple-sign-in\" aria-label=\"the issue with the expo apple sign in permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The issue with the Expo Apple Sign-In</h2>\n<p>In order to implement Apple Sign-In in Expo, we used expo-apple-authentication package, followed the Expo docs, and set up what was needed in Apple Developer account and when we’re trying to sign in (with Apple), we were getting the expected credential (authorizationCode, name, email, identityToken, etc.). We were sending the code and identity token to our api server and according to the doc we were calling the auth endpoint <code class=\"language-text\">/auth/token</code> to validate the auth code but it was failling and returning <code class=\"language-text\">400 (“invalid_grant”)</code> back from Apple.</p>\n<p>It really blocked us and Expo docs are not clear enough to help us debugged this issue, so it took us a day to finally debugged this issue, what we did was, tried decoding the identity (JWT) token (put it in <a href=\"https://jwt.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jwt.io/</a>) and found that the <code class=\"language-text\">aud</code> was being sent as <code class=\"language-text\">host.exp.Exponent</code> as opposed to that of com.test.app. So, due to the <code class=\"language-text\">aud</code> mismatch, Apple wasn’t able to identify the auth code and was returning <code class=\"language-text\">400 (“invalid_grant”)</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"iss\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://appleid.apple.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"aud\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"host.exp.Exponent\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"exp\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1613802987</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"iat\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1613716587</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, It definitely doesn’t work in the Expo app but, it works well with the standalone build on TestFlight.</p>\n<p>In our case, to get it working on expo we skipped calling an auth endpoint, and also while verifying an identity jwt token we skipped checking an aud field.</p>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<p>To generate the client_secret:- <a href=\"https://developer.okta.com/blog/2019/06/04/what-the-heck-is-sign-in-with-apple#create-a-private-key-for-client-authentication\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.okta.com/blog/2019/06/04/what-the-heck-is-sign-in-with-apple#create-a-private-key-for-client-authentication</a></p>\n<p>v<a href=\"https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens</a></p>","fields":{"slug":"/posts/general-blogs","tagSlugs":["/tag/apple-signin/"]},"frontmatter":{"date":"2021-02-22T18:00:37.121Z","description":"Now, Apple has mandated to provide Apple Sign-In as an equivalent option if your app is providing other social logins(FB, Gmail Twitter, etc) as well. In this guide I tried to simplify the entire process and how we resolved an issue we faced while using Expo for Apple Signin","tags":["Apple Signin"],"title":"Apple Sign-In and the issue we faced with Expo","socialImage":null}}},"pageContext":{"slug":"/posts/general-blogs"}}}